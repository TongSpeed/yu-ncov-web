// eslint-disable
// ⚠️ DO NOT EDIT ⚠️
// This file is automatically generated, run yarn run graphql:codegen to update

import * as Types from '../schema-types.generated';

import gql from 'graphql-tag';
import * as ApolloReactCommon from '@apollo/react-common';
import * as ApolloReactHooks from '@apollo/react-hooks';


export type CitesQueryVariables = {
  provice: Types.Scalars['String']
};


export type CitesQuery = (
  { __typename?: 'Query' }
  & { cities: Array<(
    { __typename?: 'City' }
    & Pick<Types.City, 'id' | 'title' | 'cuid'>
  )> }
);


export const CitesDocument = gql`
    query Cites($provice: String!) {
  cities(where: {province: {id: {equals: $provice}}}) {
    id
    title
    cuid
  }
}
    `;

/**
 * __useCitesQuery__
 *
 * To run a query within a React component, call `useCitesQuery` and pass it any options that fit your needs.
 * When your component renders, `useCitesQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCitesQuery({
 *   variables: {
 *      provice: // value for 'provice'
 *   },
 * });
 */
export function useCitesQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<CitesQuery, CitesQueryVariables>) {
        return ApolloReactHooks.useQuery<CitesQuery, CitesQueryVariables>(CitesDocument, baseOptions);
      }
export function useCitesLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<CitesQuery, CitesQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<CitesQuery, CitesQueryVariables>(CitesDocument, baseOptions);
        }
export type CitesQueryHookResult = ReturnType<typeof useCitesQuery>;
export type CitesLazyQueryHookResult = ReturnType<typeof useCitesLazyQuery>;
export type CitesQueryResult = ApolloReactCommon.QueryResult<CitesQuery, CitesQueryVariables>;