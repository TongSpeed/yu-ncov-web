// eslint-disable
// ⚠️ DO NOT EDIT ⚠️
// This file is automatically generated, run yarn run graphql:codegen to update

import * as Types from '../schema-types.generated';

import gql from 'graphql-tag';
import * as ApolloReactCommon from '@apollo/react-common';
import * as ApolloReactHooks from '@apollo/react-hooks';


export type AreasQueryVariables = {
  city: Types.Scalars['String']
};


export type AreasQuery = (
  { __typename?: 'Query' }
  & { areas: Array<(
    { __typename?: 'Area' }
    & Pick<Types.Area, 'id' | 'title' | 'cuid'>
  )> }
);


export const AreasDocument = gql`
    query Areas($city: String!) {
  areas(where: {city: {id: {equals: $city}}}) {
    id
    title
    cuid
  }
}
    `;

/**
 * __useAreasQuery__
 *
 * To run a query within a React component, call `useAreasQuery` and pass it any options that fit your needs.
 * When your component renders, `useAreasQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAreasQuery({
 *   variables: {
 *      city: // value for 'city'
 *   },
 * });
 */
export function useAreasQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AreasQuery, AreasQueryVariables>) {
        return ApolloReactHooks.useQuery<AreasQuery, AreasQueryVariables>(AreasDocument, baseOptions);
      }
export function useAreasLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AreasQuery, AreasQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<AreasQuery, AreasQueryVariables>(AreasDocument, baseOptions);
        }
export type AreasQueryHookResult = ReturnType<typeof useAreasQuery>;
export type AreasLazyQueryHookResult = ReturnType<typeof useAreasLazyQuery>;
export type AreasQueryResult = ApolloReactCommon.QueryResult<AreasQuery, AreasQueryVariables>;