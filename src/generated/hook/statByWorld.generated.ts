// eslint-disable
// ⚠️ DO NOT EDIT ⚠️
// This file is automatically generated, run yarn run graphql:codegen to update

import * as Types from '../schema-types.generated';

import gql from 'graphql-tag';
import * as ApolloReactCommon from '@apollo/react-common';
import * as ApolloReactHooks from '@apollo/react-hooks';


export type WorldsQueryVariables = {};


export type WorldsQuery = (
  { __typename?: 'Query' }
  & { worldRecords: Array<(
    { __typename?: 'WorldRecord' }
    & Pick<Types.WorldRecord, 'id' | 'deadCount' | 'curedCount' | 'confirmedCount' | 'suspectedCount' | 'recordAt' | 'confirmedCountAdd' | 'curedCountAdd' | 'deadCountAdd' | 'suspectedCountAdd' | 'confirmedCountAddRate' | 'curedCountAddRate' | 'deadCountAddRate' | 'suspectedCountAddRate'>
  )> }
);


export const WorldsDocument = gql`
    query worlds {
  worldRecords @client {
    id
    deadCount
    curedCount
    confirmedCount
    suspectedCount
    recordAt
    confirmedCountAdd
    curedCountAdd
    deadCountAdd
    suspectedCountAdd
    confirmedCountAddRate
    curedCountAddRate
    deadCountAddRate
    suspectedCountAddRate
  }
}
    `;

/**
 * __useWorldsQuery__
 *
 * To run a query within a React component, call `useWorldsQuery` and pass it any options that fit your needs.
 * When your component renders, `useWorldsQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useWorldsQuery({
 *   variables: {
 *   },
 * });
 */
export function useWorldsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<WorldsQuery, WorldsQueryVariables>) {
        return ApolloReactHooks.useQuery<WorldsQuery, WorldsQueryVariables>(WorldsDocument, baseOptions);
      }
export function useWorldsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<WorldsQuery, WorldsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<WorldsQuery, WorldsQueryVariables>(WorldsDocument, baseOptions);
        }
export type WorldsQueryHookResult = ReturnType<typeof useWorldsQuery>;
export type WorldsLazyQueryHookResult = ReturnType<typeof useWorldsLazyQuery>;
export type WorldsQueryResult = ApolloReactCommon.QueryResult<WorldsQuery, WorldsQueryVariables>;