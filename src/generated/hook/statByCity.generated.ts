// eslint-disable
// ⚠️ DO NOT EDIT ⚠️
// This file is automatically generated, run yarn run graphql:codegen to update

import * as Types from '../schema-types.generated';

import gql from 'graphql-tag';
import * as ApolloReactCommon from '@apollo/react-common';
import * as ApolloReactHooks from '@apollo/react-hooks';


export type StatByCityQueryVariables = {
  province?: Types.Maybe<Types.Scalars['String']>,
  city?: Types.Maybe<Types.Scalars['String']>
};


export type StatByCityQuery = (
  { __typename?: 'Query' }
  & { cityRecords: Array<(
    { __typename?: 'CityRecord' }
    & Pick<Types.CityRecord, 'id' | 'curedCount' | 'recordAt' | 'deadCount' | 'suspectedCount' | 'confirmedCount' | 'confirmedCountAdd' | 'curedCountAdd' | 'deadCountAdd' | 'suspectedCountAdd' | 'confirmedCountAddRate' | 'curedCountAddRate' | 'deadCountAddRate' | 'suspectedCountAddRate'>
    & { city: (
      { __typename?: 'City' }
      & Pick<Types.City, 'id' | 'title'>
      & { province: (
        { __typename?: 'Province' }
        & Pick<Types.Province, 'id' | 'title'>
        & { country: (
          { __typename?: 'Country' }
          & Pick<Types.Country, 'id' | 'title'>
        ) }
      ) }
    ) }
  )> }
);


export const StatByCityDocument = gql`
    query statByCity($province: String, $city: String) {
  cityRecords(province: $province, city: $city) {
    city {
      id
      title
      province {
        id
        title
        country {
          id
          title
        }
      }
    }
    id
    curedCount
    recordAt
    deadCount
    suspectedCount
    confirmedCount
    confirmedCountAdd
    curedCountAdd
    deadCountAdd
    suspectedCountAdd
    confirmedCountAddRate
    curedCountAddRate
    deadCountAddRate
    suspectedCountAddRate
  }
}
    `;

/**
 * __useStatByCityQuery__
 *
 * To run a query within a React component, call `useStatByCityQuery` and pass it any options that fit your needs.
 * When your component renders, `useStatByCityQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useStatByCityQuery({
 *   variables: {
 *      province: // value for 'province'
 *      city: // value for 'city'
 *   },
 * });
 */
export function useStatByCityQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<StatByCityQuery, StatByCityQueryVariables>) {
        return ApolloReactHooks.useQuery<StatByCityQuery, StatByCityQueryVariables>(StatByCityDocument, baseOptions);
      }
export function useStatByCityLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<StatByCityQuery, StatByCityQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<StatByCityQuery, StatByCityQueryVariables>(StatByCityDocument, baseOptions);
        }
export type StatByCityQueryHookResult = ReturnType<typeof useStatByCityQuery>;
export type StatByCityLazyQueryHookResult = ReturnType<typeof useStatByCityLazyQuery>;
export type StatByCityQueryResult = ApolloReactCommon.QueryResult<StatByCityQuery, StatByCityQueryVariables>;