// eslint-disable
// ⚠️ DO NOT EDIT ⚠️
// This file is automatically generated, run yarn run graphql:codegen to update

import * as Types from '../schema-types.generated';

import gql from 'graphql-tag';
import * as ApolloReactCommon from '@apollo/react-common';
import * as ApolloReactHooks from '@apollo/react-hooks';


export type StatByProvinceQueryVariables = {
  country?: Types.Maybe<Types.Scalars['String']>,
  province?: Types.Maybe<Types.Scalars['String']>
};


export type StatByProvinceQuery = (
  { __typename?: 'Query' }
  & { provinceRecords: Array<(
    { __typename?: 'ProvinceRecord' }
    & Pick<Types.ProvinceRecord, 'id' | 'curedCount' | 'recordAt' | 'deadCount' | 'suspectedCount' | 'confirmedCount' | 'confirmedCountAdd' | 'curedCountAdd' | 'deadCountAdd' | 'suspectedCountAdd' | 'confirmedCountAddRate' | 'curedCountAddRate' | 'deadCountAddRate' | 'suspectedCountAddRate'>
    & { province: (
      { __typename?: 'Province' }
      & Pick<Types.Province, 'id' | 'title'>
      & { country: (
        { __typename?: 'Country' }
        & Pick<Types.Country, 'id' | 'title'>
      ) }
    ) }
  )> }
);


export const StatByProvinceDocument = gql`
    query statByProvince($country: String, $province: String) {
  provinceRecords(province: $province, country: $country) @client {
    province {
      id
      title
      country {
        id
        title
      }
    }
    id
    curedCount
    recordAt
    deadCount
    suspectedCount
    confirmedCount
    confirmedCountAdd
    curedCountAdd
    deadCountAdd
    suspectedCountAdd
    confirmedCountAddRate
    curedCountAddRate
    deadCountAddRate
    suspectedCountAddRate
  }
}
    `;

/**
 * __useStatByProvinceQuery__
 *
 * To run a query within a React component, call `useStatByProvinceQuery` and pass it any options that fit your needs.
 * When your component renders, `useStatByProvinceQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useStatByProvinceQuery({
 *   variables: {
 *      country: // value for 'country'
 *      province: // value for 'province'
 *   },
 * });
 */
export function useStatByProvinceQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<StatByProvinceQuery, StatByProvinceQueryVariables>) {
        return ApolloReactHooks.useQuery<StatByProvinceQuery, StatByProvinceQueryVariables>(StatByProvinceDocument, baseOptions);
      }
export function useStatByProvinceLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<StatByProvinceQuery, StatByProvinceQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<StatByProvinceQuery, StatByProvinceQueryVariables>(StatByProvinceDocument, baseOptions);
        }
export type StatByProvinceQueryHookResult = ReturnType<typeof useStatByProvinceQuery>;
export type StatByProvinceLazyQueryHookResult = ReturnType<typeof useStatByProvinceLazyQuery>;
export type StatByProvinceQueryResult = ApolloReactCommon.QueryResult<StatByProvinceQuery, StatByProvinceQueryVariables>;