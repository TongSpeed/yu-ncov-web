// eslint-disable
// ⚠️ DO NOT EDIT ⚠️
// This file is automatically generated, run yarn run graphql:codegen to update

import * as Types from '../schema-types.generated';

import gql from 'graphql-tag';
import * as ApolloReactCommon from '@apollo/react-common';
import * as ApolloReactHooks from '@apollo/react-hooks';


export type StatByCountryQueryVariables = {
  country?: Types.Maybe<Types.Scalars['String']>
};


export type StatByCountryQuery = (
  { __typename?: 'Query' }
  & { countryRecords: Array<(
    { __typename?: 'CountryRecord' }
    & Pick<Types.CountryRecord, 'id' | 'curedCount' | 'recordAt' | 'deadCount' | 'suspectedCount' | 'confirmedCount' | 'confirmedCountAdd' | 'curedCountAdd' | 'deadCountAdd' | 'suspectedCountAdd' | 'confirmedCountAddRate' | 'curedCountAddRate' | 'deadCountAddRate' | 'suspectedCountAddRate'>
    & { country: (
      { __typename?: 'Country' }
      & Pick<Types.Country, 'id' | 'title' | 'continents'>
    ) }
  )> }
);


export const StatByCountryDocument = gql`
    query statByCountry($country: String) {
  countryRecords(country: $country) {
    country {
      id
      title
      continents
    }
    id
    curedCount
    recordAt
    deadCount
    suspectedCount
    confirmedCount
    confirmedCountAdd
    curedCountAdd
    deadCountAdd
    suspectedCountAdd
    confirmedCountAddRate
    curedCountAddRate
    deadCountAddRate
    suspectedCountAddRate
  }
}
    `;

/**
 * __useStatByCountryQuery__
 *
 * To run a query within a React component, call `useStatByCountryQuery` and pass it any options that fit your needs.
 * When your component renders, `useStatByCountryQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useStatByCountryQuery({
 *   variables: {
 *      country: // value for 'country'
 *   },
 * });
 */
export function useStatByCountryQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<StatByCountryQuery, StatByCountryQueryVariables>) {
        return ApolloReactHooks.useQuery<StatByCountryQuery, StatByCountryQueryVariables>(StatByCountryDocument, baseOptions);
      }
export function useStatByCountryLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<StatByCountryQuery, StatByCountryQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<StatByCountryQuery, StatByCountryQueryVariables>(StatByCountryDocument, baseOptions);
        }
export type StatByCountryQueryHookResult = ReturnType<typeof useStatByCountryQuery>;
export type StatByCountryLazyQueryHookResult = ReturnType<typeof useStatByCountryLazyQuery>;
export type StatByCountryQueryResult = ApolloReactCommon.QueryResult<StatByCountryQuery, StatByCountryQueryVariables>;