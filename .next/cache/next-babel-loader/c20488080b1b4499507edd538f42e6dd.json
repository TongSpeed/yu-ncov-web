{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport _AppBar from 'macoolka-ui-components/lib/AppBar';\nimport Toolbar from 'macoolka-ui-components/lib//Toolbar';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { parseStandProp } from 'macoolka-ui-core';\nvar useStyles = makeStyles(function (theme) {\n  return {\n    appBar: _objectSpread({}, parseStandProp(theme)({\n      mkHeight: \"bar_large\",\n      mkMedia: [{\n        mkHeight: \"bar_small\"\n      }, {\n        mkHeight: \"bar_medium\"\n      }, {\n        width: '100%'\n      }, {\n        width: \"calc(100% - \".concat(theme.box.width.nav, \"px)\")\n      }]\n    }), {\n      color: theme.app.appBar.color,\n      backgroundColor: theme.app.appBar.backgroundColor,\n      transition: theme.transitions.create('left')\n    })\n    /*  appBarShift: {\n      [theme.breakpoints.up('lg')]: {\n        \n      },\n    }, */\n\n  };\n});\n\nvar AppBar = function AppBar(_ref) {\n  var children = _ref.children;\n  var classes = useStyles();\n  var appBarClassName = classes.appBar; // appBarClassName += ` ${classes.appBarShift}`;\n\n  return __jsx(_AppBar, {\n    className: appBarClassName\n  }, __jsx(Toolbar, null, children));\n};\n\nexport default AppBar;","map":null,"metadata":{},"sourceType":"module"}