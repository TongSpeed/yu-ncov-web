{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react'; //import clsx from 'clsx';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport ListItem from 'macoolka-ui-components/lib/ListItem';\nimport Button from 'macoolka-ui-components/lib/Button';\nimport Collapse from 'macoolka-ui-components/lib/Collapse';\nimport Element from 'macoolka-ui-components/lib/Element';\nimport { useLink } from '../AppContext';\nimport { get } from 'macoolka-object';\nimport { parseStandProp } from 'macoolka-ui-core';\nconst useStyles = makeStyles(theme => ({\n  item: {\n    display: 'block',\n    paddingTop: 0,\n    paddingBottom: 0\n  },\n  itemLeaf: _objectSpread({\n    display: 'flex',\n    paddingTop: 0,\n    paddingBottom: 0,\n    height: \"50px\"\n  }, parseStandProp(theme)({\n    mkMarginH: \"medium\",\n    mkPaddingH: \"medium\",\n    mkPaddingV: \"small\",\n    mkMarginTop: \"small\"\n  }), {}, get(theme, [\"components\", \"NavItem\"], {})),\n  button: {\n    letterSpacing: 0,\n    justifyContent: 'flex-start',\n    textTransform: 'none',\n    width: '100%',\n    color: theme.palette.secondary.main\n  },\n  buttonLeaf: {\n    letterSpacing: 0,\n    justifyContent: 'flex-start',\n    textTransform: 'none',\n    width: '100%',\n    fontWeight: theme.typography.fontWeightRegular,\n    '&.depth-0': {\n      fontWeight: theme.typography.fontWeightMedium\n    }\n  },\n  active: {\n    color: theme.palette.primary.main,\n    fontWeight: theme.typography.fontWeightMedium\n  }\n}));\n\nconst AppDrawerNavItem = (_ref) => {\n  let {\n    children,\n    depth,\n    data,\n    // href,\n    onClick,\n    openImmediately = false,\n    topLevel = false\n  } = _ref,\n      other = _objectWithoutProperties(_ref, [\"children\", \"depth\", \"data\", \"onClick\", \"openImmediately\", \"topLevel\"]);\n\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(openImmediately);\n\n  const handleClick = () => {\n    setOpen(oldOpen => !oldOpen);\n  };\n\n  const style = {\n    paddingLeft: 8 * (3 + 2 * depth)\n  }; //  const LinkProps = useNavItemLinkProp()(data)\n\n  const Link = useLink();\n  const Icon = data.icon;\n\n  if (data.id) {\n    return __jsx(Link, {\n      href: data.href,\n      as: data.as\n    }, __jsx(ListItem, _extends({\n      component: Button,\n      onClick: onClick,\n      disableTouchRipple: true,\n      className: classes.itemLeaf,\n      disableGutters: true\n    }, other, {\n      button: true,\n      mkTextColor: \"inherit\"\n    }), __jsx(Icon, null), __jsx(Element, {\n      mkMarginLeft: \"medium\",\n      mkTypography: \"subtitle1\"\n    }, data.title)));\n  }\n\n  return __jsx(ListItem, _extends({\n    className: classes.item,\n    disableGutters: true,\n    button: true\n  }, other), __jsx(Button, {\n    classes: {\n      root: classes.button,\n      label: topLevel ? 'algolia-lvl0' : ''\n    },\n    onClick: handleClick,\n    style: style\n  }, data.title), __jsx(Collapse, {\n    in: open,\n    timeout: \"auto\",\n    unmountOnExit: true\n  }, children));\n};\n\nexport default AppDrawerNavItem;","map":null,"metadata":{},"sourceType":"module"}