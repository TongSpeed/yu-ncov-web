{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as A from 'fp-ts/lib/Array';\nimport { contramap, ordNumber, ordDate, ordString } from 'fp-ts/lib/Ord';\nimport { pipe } from 'fp-ts/lib/pipeable';\nimport { monoidSum, getStructMonoid, fold } from 'fp-ts/lib/Monoid';\nimport * as Eq from 'fp-ts/lib/Eq';\nimport { formatDateTime, formatDate } from '../helper/typeHelper';\nimport { notMaybe } from 'macoolka-predicate';\nimport * as O from 'fp-ts/lib/Option';\nconst _defaultValue = {\n  recordAt: 0,\n  curedCount: 0,\n  deadCount: 0,\n  suspectedCount: 0,\n  confirmedCount: 0\n};\nexport const add = keys => ([a, b]) => pipe(keys, A.reduce({}, (result, key) => _objectSpread({}, result, {\n  [key + 'Add']: Number(a[key]) - Number(b[key]),\n  [key + 'AddRate']: Number(b[key]) === 0 ? 0 : ((Number(a[key]) - Number(b[key])) / Number(b[key])).toFixed(2)\n})));\nexport const toVirusRecords = as => {\n  if (as.length >= 2) {\n    return pipe(A.zip(as, [...as.slice(1), _defaultValue]), A.map(([a, b]) => _objectSpread({}, a, {}, add(['deadCount', 'suspectedCount', 'confirmedCount', 'curedCount'])([a, b]))));\n  } else if (as.length === 1) {\n    return add(['deadCount', 'suspectedCount', 'confirmedCount', 'curedCount'])([as[0], _defaultValue]);\n  } else {\n    return [];\n  }\n};\nexport const defaultValue = _objectSpread({}, _defaultValue, {}, toVirusRecords([_defaultValue, _defaultValue])[0]);\nexport const ordDeadCount = contramap(a => a.deadCount)(ordNumber);\nexport const ordSuspectedCount = contramap(a => a.suspectedCount)(ordNumber);\nexport const ordConfirmedCount = contramap(a => a.confirmedCount)(ordNumber);\nexport const ordCuredCount = contramap(a => a.curedCount)(ordNumber);\nexport const ordRecordAt = contramap(a => new Date(a.recordAt))(ordDate);\nexport const VirusRecordMonoid = () => {\n  const m = {\n    empty: _defaultValue,\n    concat: (a, b) => {\n      return _objectSpread({}, b, {}, mVRecord.concat(a, b));\n    }\n  };\n  return m;\n};\nconst mVRecord = getStructMonoid({\n  curedCount: monoidSum,\n  deadCount: monoidSum,\n  suspectedCount: monoidSum,\n  confirmedCount: monoidSum\n});\nexport const group = S => {\n  return A.chop(as => {\n    const {\n      init,\n      rest\n    } = A.spanLeft(a => S.equals(a, as[0]))(as);\n    return [init, rest];\n  });\n};\nconst ordProvince = contramap(a => a.province)(ordString);\nconst eqProvince = Eq.contramap(a => a.province)(Eq.eqString);\nconst eqCity = Eq.contramap(a => a.city)(Eq.eqString);\nconst ordCity = contramap(a => a.city)(ordString);\nconst eqCountry = Eq.contramap(a => a.country)(Eq.eqString);\nconst ordCountry = contramap(a => a.country)(ordString);\nconst dayEq = {\n  equals: (a, b) => {\n    return formatDate(a) === formatDate(b);\n  }\n};\nconst eqDateByDay = Eq.contramap(a => a.recordAt)(dayEq);\nexport const groupByProvince = as => pipe(as, A.sort(ordProvince), group(eqProvince), A.map(b => pipe(b, A.sort(ordRecordAt), A.reverse, toVirusRecords)));\n\nconst getListRecord = (eq, ord) => as => pipe(as, A.sort(ord), group(eq), A.map(b => pipe(b, A.sort(ordRecordAt), A.reverse, toVirusRecords)), A.map(a => pipe(a, A.head)), A.compact, A.sort(ordConfirmedCount), A.reverse, A.filter(notMaybe));\n\nconst sumRecords = (eq, ord) => as => pipe(as, A.sort(ord), group(eq), A.map(value => pipe(value, fold(VirusRecordMonoid()))), A.sort(ordRecordAt), A.reverse, toVirusRecords, A.reverse);\n\nexport const getSumCountry = sumRecords(eqDateByDay, ordRecordAt);\nexport const getProvincesByLastDate = getListRecord(eqProvince, ordProvince);\nexport const getCountryByLastDate = getListRecord(eqCountry, ordCountry);\nexport const getCityByLastDate = getListRecord(eqCity, ordCity);\nexport const getCountryLink = a => ({\n  title: a.country,\n  href: `/country/[id]`,\n  as: `/country/${a.countryId}`\n});\nexport const getProvinceLink = a => ({\n  title: a.province,\n  href: `/province/[id]`,\n  as: `/province/${a.provinceId}`\n});\nexport const getCityLink = a => ({\n  title: a.city,\n  href: `/city/[id]`,\n  as: `/city/${a.city}`\n});\nexport const getWorldLink = () => ({\n  title: '全球',\n  href: '/world'\n});\nexport const getLastRecordAtString = as => pipe(as, A.sort(ordRecordAt), A.reverse, A.head, O.map(a => `最后更新时间：${formatDateTime()(a.recordAt)}`), O.getOrElse(() => ''));\nexport const standChinaTable = [['recordAt', 'confirmedCount', 'suspectedCount', 'deadCount', 'curedCount'], ['recordAt', 'confirmedCount', 'confirmedCountAdd', 'suspectedCount', 'deadCount', 'curedCount'], ['recordAt', 'confirmedCount', 'confirmedCountAdd', 'suspectedCount', 'suspectedCountAdd', 'deadCount', 'curedCount'], ['recordAt', 'confirmedCount', 'confirmedCountAdd', 'confirmedCountAddRate', 'suspectedCount', 'suspectedCountAdd', 'deadCount', 'deadCountAdd', 'curedCount', 'curedCountAdd']];\nexport const standTable = [['recordAt', 'confirmedCount', 'deadCount', 'curedCount'], ['recordAt', 'confirmedCount', 'confirmedCountAdd', 'deadCount', 'curedCount'], ['recordAt', 'confirmedCount', 'confirmedCountAdd', 'deadCount', 'deadCountAdd', 'curedCount'], ['recordAt', 'confirmedCount', 'confirmedCountAdd', 'confirmedCountAddRate', 'deadCount', 'deadCountAdd', 'curedCount', 'curedCountAdd']];\nexport const countryTable = [['country', 'confirmedCount', 'deadCount', 'curedCount'], ['continents', 'country', 'confirmedCount', 'deadCount', 'curedCount'], ['continents', 'country', 'confirmedCount', 'confirmedCountAdd', 'deadCount', 'curedCount'], ['continents', 'country', 'confirmedCount', 'confirmedCountAddRate', 'confirmedCountAdd', 'deadCount', 'deadCountAdd', 'curedCount', 'curedCountAdd']];\nexport const provinceTable = [['province', 'confirmedCount', 'deadCount', 'curedCount'], ['province', 'confirmedCount', 'confirmedCountAdd', 'deadCount', 'curedCount'], ['province', 'confirmedCount', 'confirmedCountAdd', 'deadCount', 'deadCountAdd', 'curedCount'], ['province', 'confirmedCount', 'confirmedCountAdd', 'confirmedCountAddRate', 'deadCount', 'deadCountAdd', 'curedCount', 'curedCountAdd']];\nexport const cityTable = [['city', 'confirmedCount', 'deadCount', 'curedCount'], ['city', 'confirmedCount', 'confirmedCountAdd', 'deadCount', 'curedCount'], ['city', 'confirmedCount', 'confirmedCountAdd', 'deadCount', 'deadCountAdd', 'curedCount'], ['city', 'confirmedCount', 'confirmedCountAdd', 'confirmedCountAddRate', 'deadCount', 'deadCountAdd', 'curedCount', 'curedCountAdd']];","map":null,"metadata":{},"sourceType":"module"}