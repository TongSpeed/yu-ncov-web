{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/*eslint-disable*/\nimport React from \"react\";\nimport classNames from \"classnames\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport { parseStandProp } from 'macoolka-ui-core';\nconst useStyles = makeStyles(theme => ({\n  drawerPaper: () => _objectSpread({}, parseStandProp(theme)({\n    mkShadow: 0,\n    zIndex: 1,\n    mkPosition: 'fixed',\n    mkPositionAlign: 'left',\n    mkBorder: \"none\",\n    flexShrink: 0,\n    mkWidth: 'nav',\n    mkScrollBar: \"none\",\n    paddingTop: theme.box.height.bar_large,\n    mkMedia: [{}, {\n      mkHeight: 'fullScreen',\n      mkShadow: 4,\n      mkZIndex: \"drawer\"\n    }, {\n      //   left: \"auto\",\n      mkHeight: \"fullScreen\",\n      //  mkZIndex: \"drawer\",\n      transform: `translate3d(${theme.box.width.nav}px, 0, 0)`,\n      transition: \"all 0.33s cubic-bezier(0.685, 0.0473, 0.346, 1)\",\n      mkTextAlign: \"left\",\n      borderTop: \"none\",\n      mkPaddingH: \"none\"\n    }]\n  })),\n  drawerPaperRTL: _objectSpread({}, parseStandProp(theme)({\n    mkMedia: [{}, {\n      left: \"auto !important\",\n      right: \"0 !important\"\n    }, {\n      left: \"0  !important\",\n      right: \"auto !important\"\n    }]\n  })),\n  hideOnlyXl: _objectSpread({}, parseStandProp(theme)({\n    mkMedia: [{}, {}, {\n      mkVisible: \"visible\"\n    }, {\n      mkVisible: \"none\"\n    }]\n  })),\n  showOnlyxl: _objectSpread({}, parseStandProp(theme)({\n    mkMedia: [{}, {}, {\n      mkVisible: \"none\"\n    }, {\n      mkVisible: \"visible\"\n    }]\n  }))\n}));\n\nconst Sidebar = ({\n  rtlActive = false,\n  open,\n  children,\n  handleDrawerToggle\n}) => {\n  const classes = useStyles();\n  return __jsx(\"div\", null, __jsx(\"div\", {\n    className: classes.hideOnlyXl\n  }, __jsx(Drawer, {\n    variant: \"temporary\",\n    anchor: rtlActive ? \"left\" : \"right\",\n    open: open,\n    classes: {\n      paper: classNames(classes.drawerPaper, {\n        [classes.drawerPaperRTL]: rtlActive\n      })\n    },\n    onClose: handleDrawerToggle,\n    ModalProps: {\n      keepMounted: true // Better open performance on mobile.\n\n    }\n  }, children)), __jsx(\"div\", {\n    className: classes.showOnlyxl\n  }, __jsx(Drawer, {\n    anchor: rtlActive ? \"left\" : \"right\",\n    variant: \"permanent\",\n    open: open,\n    classes: {\n      paper: classNames(classes.drawerPaper, {\n        [classes.drawerPaperRTL]: rtlActive\n      })\n    }\n  }, children)));\n};\n\nexport default Sidebar;","map":null,"metadata":{},"sourceType":"module"}