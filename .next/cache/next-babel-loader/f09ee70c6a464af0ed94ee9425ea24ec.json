{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport GridContainer from \"../dashboard/Grid/GridContainer\";\nimport GridItem from \"../dashboard/Grid/GridItem\";\nimport { isArray } from 'macoolka-predicate';\nimport Page from './Page';\nimport KeyCard from './KeyCard';\nimport Chart from './Chart';\nimport Table from './Table';\nimport Card from './Card';\nimport Container from './Contaner';\nimport FieldDisplay from './FieldDisplay';\nimport Query from './Query';\nvar key = 0;\n\nvar toChildModel = function toChildModel(parent) {\n  return function (child) {\n    return _objectSpread({\n      model: parent.model\n    }, child);\n  };\n};\n\nvar ModelView = function ModelView(_ref) {\n  var model = _ref.model,\n      value = _ref.value;\n  var transform = model.transform;\n\n  var toGrid = function toGrid(_ref2) {\n    var grid = _ref2.grid;\n    return function (a) {\n      return grid ? __jsx(GridItem, grid, a) : a;\n    };\n  };\n\n  var toItems = function toItems(v) {\n    return function (param) {\n      if (param) {\n        var items = param.items,\n            _param$isList = param.isList,\n            isList = _param$isList === void 0 ? false : _param$isList;\n\n        var toDataList = function toDataList(f) {\n          return isList ? v.map(f) : f(v);\n        };\n\n        if (isArray(items)) {\n          return toDataList(function (a) {\n            return items.map(function (m) {\n              return __jsx(ModelView, {\n                key: key++,\n                model: toChildModel(model)(m),\n                value: a\n              });\n            });\n          });\n        } else {\n          return toDataList(function (a) {\n            return __jsx(ModelView, {\n              key: key++,\n              model: toChildModel(model)(items),\n              value: a\n            });\n          });\n        }\n      } else {\n        return null;\n      }\n    };\n  };\n\n  var to = function to(_a) {\n    var a = transform ? transform(_a) : _a;\n    var R;\n\n    switch (model._type) {\n      case 'row':\n        {\n          R = __jsx(Container, {\n            model: model,\n            value: a,\n            title: toItems(a)(model.title),\n            subTitle: toItems(a)(model.subTitle)\n          }, \" \", toItems(a)(model));\n          break;\n        }\n\n      case 'page':\n        {\n          R = __jsx(Page, {\n            model: model,\n            value: a,\n            title: toItems(a)(model.title),\n            subTitle: toItems(a)(model.subTitle)\n          }, \" \", toItems(a)(model));\n          break;\n        }\n\n      case 'keycard':\n        R = __jsx(KeyCard, {\n          model: model,\n          value: a,\n          title: toItems(a)(model.title),\n          subTitle: toItems(a)(model.subTitle),\n          footer: toItems(a)(model.footer)\n        }, \" \");\n        break;\n\n      case 'card':\n        R = __jsx(Card, {\n          model: model,\n          value: a,\n          title: toItems(a)(model.title),\n          subTitle: toItems(a)(model.subTitle),\n          footer: toItems(a)(model.footer)\n        }, \" \", toItems(a)(model));\n        break;\n\n      case 'chart':\n        R = __jsx(Chart, {\n          model: model,\n          value: a\n        }, \" \");\n        break;\n\n      case 'table':\n        R = __jsx(Table, {\n          model: model,\n          value: a\n        }, \" \");\n        break;\n\n      case 'field':\n        R = __jsx(FieldDisplay, {\n          model: model,\n          value: a\n        }, \" \");\n        break;\n\n      default:\n        R = __jsx(GridContainer, null, \" \");\n        break;\n    }\n\n    return toGrid(model)(R);\n  };\n\n  return __jsx(Query, {\n    callback: to,\n    model: model,\n    value: value\n  });\n};\n\nexport default ModelView;","map":null,"metadata":{},"sourceType":"module"}