{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport Hiddren from '@material-ui/core/Hidden';\nimport React from \"react\";\nimport Table from \"../dashboard/Table/Table\";\nimport { getTFieldValue } from '../helper/modelHelper';\nconst hiddenProps = [{\n  only: ['lg', 'sm', 'md', 'xl']\n}, {\n  only: ['xs', 'md', 'lg', 'xl']\n}, {\n  only: ['xs', 'sm', 'lg',, 'xl']\n}, {\n  only: ['xs', 'sm', 'md']\n}];\nexport const TableList = ({\n  value,\n  model: {\n    color = \"primary\",\n    model,\n    names\n  }\n}) => {\n  const titles = names.map(as => as.map(a => getTFieldValue(model)(value)({\n    field: a,\n    type: 'label'\n  })));\n  const values = names.map(as => value.map(v => as.map(a => getTFieldValue(model)(v)({\n    field: a,\n    type: 'value'\n  }))));\n  return __jsx(React.Fragment, null, values.map((value, i) => __jsx(Hiddren, _extends({}, hiddenProps[i], {\n    key: i\n  }), __jsx(Table, {\n    tableHeaderColor: color,\n    tableHead: titles[i],\n    tableData: value\n  }))));\n};\nexport default TableList;","map":null,"metadata":{},"sourceType":"module"}