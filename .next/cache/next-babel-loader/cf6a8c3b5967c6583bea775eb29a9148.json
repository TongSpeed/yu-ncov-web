{"ast":null,"code":"import _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport { loadScript, loadCSS } from 'macoolka-ui-core/lib/utils';\nexport function registerServiceWorker() {\n  var registration;\n  return _regeneratorRuntime.async(function registerServiceWorker$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (!('serviceWorker' in navigator && true && window.location.host.indexOf('material-ui.com') <= 0)) {\n            _context.next = 5;\n            break;\n          }\n\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(navigator.serviceWorker.register('/sw.js'));\n\n        case 3:\n          registration = _context.sent;\n          // Force the page reload for users.\n          forcePageReload(registration);\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n} // Inspired by\n// https://developers.google.com/web/tools/workbox/guides/advanced-recipes#offer_a_page_reload_for_users\n\nfunction forcePageReload(registration) {\n  if (!navigator.serviceWorker.controller) {\n    // The window client isn't currently controlled so it's a new service\n    // worker that will activate immediately.\n    return;\n  }\n\n  if (registration.waiting) {\n    // SW is waiting to activate. Can occur if multiple clients open and\n    // one of the clients is refreshed.\n    registration.waiting.postMessage('skipWaiting');\n    return;\n  }\n\n  function listenInstalledStateChange() {\n    registration.installing.addEventListener('statechange', function (event) {\n      if (event.target.state === 'installed' && registration.waiting) {\n        // A new service worker is available, inform the user\n        registration.waiting.postMessage('skipWaiting');\n      } else if (event.target.state === 'activated') {\n        // Force the control of the page by the activated service worker.\n        window.location.reload();\n      }\n    });\n  }\n\n  if (registration.installing) {\n    listenInstalledStateChange();\n    return;\n  } // We are currently controlled so a new SW may be found...\n  // Add a listener in case a new SW is found,\n\n\n  registration.addEventListener('updatefound', listenInstalledStateChange);\n}\n\nexport function loadDependencies(r) {\n  _Object$keys(r.loadJavscript).map(function (a) {\n    loadScript(a, document.querySelector(r.loadJavscript[a]));\n  });\n\n  _Object$keys(r.loadJavscript).map(function (a) {\n    loadCSS(a, document.querySelector(r.loadJavscript[a]));\n  });\n}","map":null,"metadata":{},"sourceType":"module"}