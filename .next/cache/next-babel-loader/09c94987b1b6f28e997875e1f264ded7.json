{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport _AppBar from 'macoolka-ui-components/lib/AppBar';\nimport Toolbar from 'macoolka-ui-components/lib//Toolbar';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { parseStandProp } from 'macoolka-ui-core';\nconst useStyles = makeStyles(theme => ({\n  appBar: _objectSpread({}, parseStandProp(theme)({\n    mkHeight: \"bar_large\",\n    mkMedia: [{\n      mkHeight: \"bar_small\"\n    }, {\n      mkHeight: \"bar_medium\"\n    }, {\n      width: '100%'\n    }, {\n      width: `calc(100% - ${theme.box.width.nav}px)`\n    }]\n  }), {\n    color: theme.app.appBar.color,\n    backgroundColor: theme.app.appBar.backgroundColor,\n    transition: theme.transitions.create('left')\n  })\n  /*  appBarShift: {\n    [theme.breakpoints.up('lg')]: {\n      \n    },\n  }, */\n\n}));\n\nconst AppBar = ({\n  children\n}) => {\n  const classes = useStyles();\n  let appBarClassName = classes.appBar; // appBarClassName += ` ${classes.appBarShift}`;\n\n  return __jsx(_AppBar, {\n    className: appBarClassName\n  }, __jsx(Toolbar, null, children));\n};\n\nexport default AppBar;","map":null,"metadata":{},"sourceType":"module"}