{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as A from 'fp-ts/lib/Array';\nimport { contramap, ordNumber, ordDate, ordString } from 'fp-ts/lib/Ord';\nimport { pipe } from 'fp-ts/lib/pipeable';\nimport { monoidSum, getStructMonoid, fold } from 'fp-ts/lib/Monoid';\nimport * as Eq from 'fp-ts/lib/Eq';\nimport { formatDateTime, formatDate } from '../helper/typeHelper';\nimport { notMaybe } from 'macoolka-predicate';\nimport * as O from 'fp-ts/lib/Option';\nvar _defaultValue = {\n  recordAt: 0,\n  curedCount: 0,\n  deadCount: 0,\n  suspectedCount: 0,\n  confirmedCount: 0\n};\nexport var add = function add(keys) {\n  return function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        a = _ref2[0],\n        b = _ref2[1];\n\n    return pipe(keys, A.reduce({}, function (result, key) {\n      var _objectSpread2;\n\n      return _objectSpread({}, result, (_objectSpread2 = {}, _defineProperty(_objectSpread2, key + 'Add', Number(a[key]) - Number(b[key])), _defineProperty(_objectSpread2, key + 'AddRate', Number(b[key]) === 0 ? 0 : ((Number(a[key]) - Number(b[key])) / Number(b[key])).toFixed(2)), _objectSpread2));\n    }));\n  };\n};\nexport var toVirusRecords = function toVirusRecords(as) {\n  if (as.length >= 2) {\n    return pipe(A.zip(as, [].concat(_toConsumableArray(as.slice(1)), [_defaultValue])), A.map(function (_ref3) {\n      var _ref4 = _slicedToArray(_ref3, 2),\n          a = _ref4[0],\n          b = _ref4[1];\n\n      return _objectSpread({}, a, {}, add(['deadCount', 'suspectedCount', 'confirmedCount', 'curedCount'])([a, b]));\n    }));\n  } else if (as.length === 1) {\n    return add(['deadCount', 'suspectedCount', 'confirmedCount', 'curedCount'])([as[0], _defaultValue]);\n  } else {\n    return [];\n  }\n};\nexport var defaultValue = _objectSpread({}, _defaultValue, {}, toVirusRecords([_defaultValue, _defaultValue])[0]);\nexport var ordDeadCount = contramap(function (a) {\n  return a.deadCount;\n})(ordNumber);\nexport var ordSuspectedCount = contramap(function (a) {\n  return a.suspectedCount;\n})(ordNumber);\nexport var ordConfirmedCount = contramap(function (a) {\n  return a.confirmedCount;\n})(ordNumber);\nexport var ordCuredCount = contramap(function (a) {\n  return a.curedCount;\n})(ordNumber);\nexport var ordRecordAt = contramap(function (a) {\n  return new Date(a.recordAt);\n})(ordDate);\nexport var VirusRecordMonoid = function VirusRecordMonoid() {\n  var m = {\n    empty: _defaultValue,\n    concat: function concat(a, b) {\n      return _objectSpread({}, b, {}, mVRecord.concat(a, b));\n    }\n  };\n  return m;\n};\nvar mVRecord = getStructMonoid({\n  curedCount: monoidSum,\n  deadCount: monoidSum,\n  suspectedCount: monoidSum,\n  confirmedCount: monoidSum\n});\nexport var group = function group(S) {\n  return A.chop(function (as) {\n    var _A$spanLeft = A.spanLeft(function (a) {\n      return S.equals(a, as[0]);\n    })(as),\n        init = _A$spanLeft.init,\n        rest = _A$spanLeft.rest;\n\n    return [init, rest];\n  });\n};\nvar ordProvince = contramap(function (a) {\n  return a.province;\n})(ordString);\nvar eqProvince = Eq.contramap(function (a) {\n  return a.province;\n})(Eq.eqString);\nvar eqCity = Eq.contramap(function (a) {\n  return a.city;\n})(Eq.eqString);\nvar ordCity = contramap(function (a) {\n  return a.city;\n})(ordString);\nvar eqCountry = Eq.contramap(function (a) {\n  return a.country;\n})(Eq.eqString);\nvar ordCountry = contramap(function (a) {\n  return a.country;\n})(ordString);\nvar dayEq = {\n  equals: function equals(a, b) {\n    return formatDate(a) === formatDate(b);\n  }\n};\nvar eqDateByDay = Eq.contramap(function (a) {\n  return a.recordAt;\n})(dayEq);\nexport var groupByProvince = function groupByProvince(as) {\n  return pipe(as, A.sort(ordProvince), group(eqProvince), A.map(function (b) {\n    return pipe(b, A.sort(ordRecordAt), A.reverse, toVirusRecords);\n  }));\n};\n\nvar getListRecord = function getListRecord(eq, ord) {\n  return function (as) {\n    return pipe(as, A.sort(ord), group(eq), A.map(function (b) {\n      return pipe(b, A.sort(ordRecordAt), A.reverse, toVirusRecords);\n    }), A.map(function (a) {\n      return pipe(a, A.head);\n    }), A.compact, A.sort(ordConfirmedCount), A.reverse, A.filter(notMaybe));\n  };\n};\n\nvar sumRecords = function sumRecords(eq, ord) {\n  return function (as) {\n    return pipe(as, A.sort(ord), group(eq), A.map(function (value) {\n      return pipe(value, fold(VirusRecordMonoid()));\n    }), A.sort(ordRecordAt), A.reverse, toVirusRecords, A.reverse);\n  };\n};\n\nexport var getSumCountry = sumRecords(eqDateByDay, ordRecordAt);\nexport var getProvincesByLastDate = getListRecord(eqProvince, ordProvince);\nexport var getCountryByLastDate = getListRecord(eqCountry, ordCountry);\nexport var getCityByLastDate = getListRecord(eqCity, ordCity);\nexport var getCountryLink = function getCountryLink(a) {\n  return {\n    title: a.country,\n    href: \"/country/[id]\",\n    as: \"/country/\".concat(a.countryId)\n  };\n};\nexport var getProvinceLink = function getProvinceLink(a) {\n  return {\n    title: a.province,\n    href: \"/province/[id]\",\n    as: \"/province/\".concat(a.provinceId)\n  };\n};\nexport var getCityLink = function getCityLink(a) {\n  return {\n    title: a.city,\n    href: \"/city/[id]\",\n    as: \"/city/\".concat(a.city)\n  };\n};\nexport var getWorldLink = function getWorldLink() {\n  return {\n    title: '全球',\n    href: '/world'\n  };\n};\nexport var getLastRecordAtString = function getLastRecordAtString(as) {\n  return pipe(as, A.sort(ordRecordAt), A.reverse, A.head, O.map(function (a) {\n    return \"\\u6700\\u540E\\u66F4\\u65B0\\u65F6\\u95F4\\uFF1A\".concat(formatDateTime()(a.recordAt));\n  }), O.getOrElse(function () {\n    return '';\n  }));\n};\nexport var standChinaTable = [['recordAt', 'confirmedCount', 'suspectedCount', 'deadCount', 'curedCount'], ['recordAt', 'confirmedCount', 'confirmedCountAdd', 'suspectedCount', 'deadCount', 'curedCount'], ['recordAt', 'confirmedCount', 'confirmedCountAdd', 'suspectedCount', 'suspectedCountAdd', 'deadCount', 'curedCount'], ['recordAt', 'confirmedCount', 'confirmedCountAdd', 'confirmedCountAddRate', 'suspectedCount', 'suspectedCountAdd', 'deadCount', 'deadCountAdd', 'curedCount', 'curedCountAdd']];\nexport var standTable = [['recordAt', 'confirmedCount', 'deadCount', 'curedCount'], ['recordAt', 'confirmedCount', 'confirmedCountAdd', 'deadCount', 'curedCount'], ['recordAt', 'confirmedCount', 'confirmedCountAdd', 'deadCount', 'deadCountAdd', 'curedCount'], ['recordAt', 'confirmedCount', 'confirmedCountAdd', 'confirmedCountAddRate', 'deadCount', 'deadCountAdd', 'curedCount', 'curedCountAdd']];\nexport var countryTable = [['country', 'confirmedCount', 'deadCount', 'curedCount'], ['continents', 'country', 'confirmedCount', 'deadCount', 'curedCount'], ['continents', 'country', 'confirmedCount', 'confirmedCountAdd', 'deadCount', 'curedCount'], ['continents', 'country', 'confirmedCount', 'confirmedCountAddRate', 'confirmedCountAdd', 'deadCount', 'deadCountAdd', 'curedCount', 'curedCountAdd']];\nexport var provinceTable = [['province', 'confirmedCount', 'deadCount', 'curedCount'], ['province', 'confirmedCount', 'confirmedCountAdd', 'deadCount', 'curedCount'], ['province', 'confirmedCount', 'confirmedCountAdd', 'deadCount', 'deadCountAdd', 'curedCount'], ['province', 'confirmedCount', 'confirmedCountAdd', 'confirmedCountAddRate', 'deadCount', 'deadCountAdd', 'curedCount', 'curedCountAdd']];\nexport var cityTable = [['city', 'confirmedCount', 'deadCount', 'curedCount'], ['city', 'confirmedCount', 'confirmedCountAdd', 'deadCount', 'curedCount'], ['city', 'confirmedCount', 'confirmedCountAdd', 'deadCount', 'deadCountAdd', 'curedCount'], ['city', 'confirmedCount', 'confirmedCountAdd', 'confirmedCountAddRate', 'deadCount', 'deadCountAdd', 'curedCount', 'curedCountAdd']];","map":null,"metadata":{},"sourceType":"module"}