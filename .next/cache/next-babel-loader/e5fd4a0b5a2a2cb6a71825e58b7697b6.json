{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport Error from 'macoolka-ui-components/lib/Error';\nimport InfiniteScroll from 'macoolka-ui-components/lib/InfiniteScroll';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst InfiniteScrollQuery = ({\n  model: {\n    query\n  },\n  callback,\n  value\n}) => {\n  if (query) {\n    const {\n      infiniteScroll,\n      useQuery,\n      queryName,\n      variable\n    } = query;\n    const {\n      loading,\n      error,\n      data,\n      fetchMore\n    } = useQuery({\n      variables: variable\n    });\n\n    if (error) {\n      return __jsx(Error, {\n        title: error.name,\n        content: error.message\n      });\n    }\n\n    let hasMore = true;\n\n    if (data) {\n      const _dataValue = queryName ? data[queryName] : data;\n\n      if (infiniteScroll) {\n        return __jsx(InfiniteScroll, {\n          isLoading: loading,\n          hasMore: hasMore,\n          onLoadMore: () => fetchMore({\n            variables: _objectSpread({}, variable, {\n              skip: _dataValue.length\n            }),\n            updateQuery: (prev, {\n              fetchMoreResult\n            }) => {\n              if (!fetchMoreResult) {\n                hasMore = false;\n                return prev;\n              }\n\n              if (fetchMoreResult[queryName].length === 0) {\n                hasMore = false;\n                return prev;\n              }\n\n              return Object.assign({}, prev, {\n                [queryName]: [...prev[queryName], ...fetchMoreResult[queryName]]\n              });\n            }\n          })\n        }, callback(data[queryName]));\n      } else {\n        return callback(_dataValue);\n      }\n    } else if (loading) {\n      return __jsx(CircularProgress, null);\n    }\n  } else {\n    return callback(value);\n  }\n};\n\nexport default InfiniteScrollQuery;","map":null,"metadata":{},"sourceType":"module"}