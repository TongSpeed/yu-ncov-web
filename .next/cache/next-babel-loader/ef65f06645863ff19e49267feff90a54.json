{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _objectDestructuringEmpty from \"@babel/runtime-corejs2/helpers/esm/objectDestructuringEmpty\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { useEventCallback } from 'macoolka-ui-core/lib/event';\nimport { map, withLatestFrom } from \"macoolka-reactive\";\nimport { pipe } from \"fp-ts/lib/pipeable\";\nimport { get } from 'macoolka-object';\nimport { getCookie } from 'macoolka-ui-core/lib/utils';\nimport { ThemeProvider as MuiThemeProvider } from '@material-ui/core/styles';\nexport var AppContext = React.createContext(null);\nexport var useAppState = function useAppState(_ref) {\n  var style = _ref.style,\n      info = _ref.info,\n      components = _ref.components,\n      constant = _ref.constant,\n      resource = _ref.resource,\n      functions = _ref.functions,\n      navItems = _ref.navItems;\n\n  var _useEventCallback = useEventCallback({\n    callback: function callback(_ref2) {\n      var event = _ref2.event;\n      return event;\n    },\n    initialState: []\n  }),\n      _useEventCallback$sta = _useEventCallback.state,\n      pageTitles = _useEventCallback$sta === void 0 ? [] : _useEventCallback$sta,\n      setPageTitles = _useEventCallback.callback;\n\n  var _useEventCallback2 = useEventCallback({\n    callback: function callback(_ref3) {\n      var event = _ref3.event;\n      return event;\n    },\n    initialState: get(style, 'isShowBar', true)\n  }),\n      _useEventCallback2$st = _useEventCallback2.state,\n      isShowBar = _useEventCallback2$st === void 0 ? true : _useEventCallback2$st,\n      setShowBar = _useEventCallback2.callback;\n\n  var _useEventCallback3 = useEventCallback({\n    callback: function callback(_ref4) {\n      var event = _ref4.event,\n          state = _ref4.state;\n      return pipe(event, withLatestFrom(state), map(function (_ref5) {\n        var _ref6 = _slicedToArray(_ref5, 2),\n            _ = _ref6[0],\n            state = _ref6[1];\n\n        return !state;\n      }));\n    },\n    initialState: get(style, 'isOpenNav', true)\n  }),\n      isOpenNav = _useEventCallback3.state,\n      toggleNav = _useEventCallback3.callback;\n\n  var _useEventCallback4 = useEventCallback({\n    callback: function callback(_ref7) {\n      var event = _ref7.event,\n          state = _ref7.state;\n      return pipe(event, withLatestFrom(state), map(function (_ref8) {\n        var _ref9 = _slicedToArray(_ref8, 2),\n            _ = _ref9[0],\n            state = _ref9[1];\n\n        return !state;\n      }));\n    },\n    initialState: get(style, 'isOpenExpandNav', false)\n  }),\n      isOpenExpandNav = _useEventCallback4.state,\n      toggleExpandNav = _useEventCallback4.callback;\n\n  var _useEventCallback5 = useEventCallback({\n    callback: function callback(_ref10) {\n      var event = _ref10.event,\n          state = _ref10.state;\n      return pipe(event, withLatestFrom(state), map(function (_ref11) {\n        var _ref12 = _slicedToArray(_ref11, 2),\n            _ = _ref12[0],\n            state = _ref12[1];\n\n        return !state;\n      }));\n    },\n    initialState: get(style, 'isLight', true)\n  }),\n      isLight = _useEventCallback5.state,\n      toggleLight = _useEventCallback5.callback;\n\n  var _useEventCallback6 = useEventCallback({\n    callback: function callback(_ref13) {\n      var event = _ref13.event;\n      return event;\n    },\n    initialState: get(style, 'locale', 'en')\n  }),\n      locale = _useEventCallback6.state,\n      setLocale = _useEventCallback6.callback;\n  /*     const { state: pageTitle, callback: setPageTitle } = useEventCallback<PageTitle[], PageTitle[]>(\n       {\n         callback: ({ event }) => event,\n         initialState: [],\n       })  */\n  // let pageTitle=[]\n\n\n  return {\n    style: {\n      isShowBar: isShowBar,\n      setShowBar: setShowBar,\n      isOpenNav: isOpenNav,\n      toggleNav: toggleNav,\n      isOpenExpandNav: isOpenExpandNav,\n      toggleExpandNav: toggleExpandNav,\n      isLight: isLight,\n      toggleLight: toggleLight,\n      locale: locale,\n      setLocale: setLocale\n    },\n    page: {\n      pageTitles: pageTitles,\n      setPageTitles: setPageTitles\n    },\n    info: _objectSpread({}, info, {\n      i18n: false\n    }),\n    navItems: navItems,\n    components: components,\n    functions: functions,\n    constant: constant,\n    resource: resource\n  };\n};\nexport var AppProvider = function AppProvider(_ref14) {\n  var children = _ref14.children,\n      data = _ref14.data;\n  var appState = useAppState(data);\n  var _appState$style = appState.style,\n      isLight = _appState$style.isLight,\n      toggleLight = _appState$style.toggleLight;\n\n  _objectDestructuringEmpty(appState.info);\n\n  React.useEffect(function () {\n    if (process.browser) {\n      // const nextPaletteColors: ThemeOptions['paletteColors'] = JSON.parse(getCookie('paletteColors') || 'null');\n      var nextPaletteType = getCookie('paletteType');\n\n      if (nextPaletteType && nextPaletteType !== (isLight ? 'light' : 'dark')) {\n        toggleLight();\n      }\n    }\n  }, []); // persist paletteType\n\n  React.useEffect(function () {\n    document.cookie = \"paletteType=\".concat(isLight ? 'light' : 'dark', \";path=/;max-age=31536000\");\n  }, [isLight]);\n  var theme = data.style.theme;\n  /*  React.useMemo(() => {\n    return createTheme(data.style.theme, locale as any)(data.style.buildComponents);\n   }, [isLight]); */\n\n  return __jsx(AppContext.Provider, {\n    value: appState\n  }, __jsx(MuiThemeProvider, {\n    theme: theme\n  }, children));\n};\nexport var useAppComponents = function useAppComponents() {\n  return React.useContext(AppContext).components;\n};\nexport var useLink = function useLink() {\n  return React.useContext(AppContext).components.Link;\n};\nexport var useRouter = function useRouter() {\n  return React.useContext(AppContext).functions.useRouter();\n};\nexport var useAppInfo = function useAppInfo() {\n  return React.useContext(AppContext).info;\n};\nexport var useAppConstant = function useAppConstant() {\n  return React.useContext(AppContext).constant;\n};\nexport var useAppResource = function useAppResource() {\n  return React.useContext(AppContext).resource;\n};\nexport var useAppStyle = function useAppStyle() {\n  return React.useContext(AppContext).style;\n};\nexport var useNavItems = function useNavItems() {\n  return React.useContext(AppContext).navItems;\n};\nexport var usePageTitles = function usePageTitles() {\n  return React.useContext(AppContext).page.pageTitles;\n};\nexport var useSetPageTitles = function useSetPageTitles() {\n  return React.useContext(AppContext).page.setPageTitles;\n}; //export const useQuery = () => React.useContext(AppContext).functions.query\n\nexport var usePage = function usePage() {\n  return React.useContext(AppContext).page;\n};","map":null,"metadata":{},"sourceType":"module"}