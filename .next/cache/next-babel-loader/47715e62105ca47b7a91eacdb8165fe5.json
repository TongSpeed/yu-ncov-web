{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { useEventCallback } from 'macoolka-ui-core/lib/event';\nimport { map, withLatestFrom } from \"macoolka-reactive\";\nimport { pipe } from \"fp-ts/lib/pipeable\";\nimport { get } from 'macoolka-object';\nimport { getCookie } from 'macoolka-ui-core/lib/utils';\nimport { ThemeProvider as MuiThemeProvider } from '@material-ui/core/styles';\nexport const AppContext = React.createContext(null);\nexport const useAppState = ({\n  style,\n  info,\n  components,\n  constant,\n  resource,\n  functions,\n  navItems\n}) => {\n  const {\n    state: pageTitles = [],\n    callback: setPageTitles\n  } = useEventCallback({\n    callback: ({\n      event\n    }) => event,\n    initialState: []\n  });\n  const {\n    state: isShowBar = true,\n    callback: setShowBar\n  } = useEventCallback({\n    callback: ({\n      event\n    }) => event,\n    initialState: get(style, 'isShowBar', true)\n  });\n  const {\n    state: isOpenNav,\n    callback: toggleNav\n  } = useEventCallback({\n    callback: ({\n      event,\n      state\n    }) => pipe(event, withLatestFrom(state), map(([_, state]) => !state)),\n    initialState: get(style, 'isOpenNav', true)\n  });\n  const {\n    state: isOpenExpandNav,\n    callback: toggleExpandNav\n  } = useEventCallback({\n    callback: ({\n      event,\n      state\n    }) => pipe(event, withLatestFrom(state), map(([_, state]) => !state)),\n    initialState: get(style, 'isOpenExpandNav', false)\n  });\n  const {\n    state: isLight,\n    callback: toggleLight\n  } = useEventCallback({\n    callback: ({\n      event,\n      state\n    }) => pipe(event, withLatestFrom(state), map(([_, state]) => {\n      return !state;\n    })),\n    initialState: get(style, 'isLight', true)\n  });\n  const {\n    state: locale,\n    callback: setLocale\n  } = useEventCallback({\n    callback: ({\n      event\n    }) => event,\n    initialState: get(style, 'locale', 'en')\n  });\n  /*     const { state: pageTitle, callback: setPageTitle } = useEventCallback<PageTitle[], PageTitle[]>(\n       {\n         callback: ({ event }) => event,\n         initialState: [],\n       })  */\n  // let pageTitle=[]\n\n  return {\n    style: {\n      isShowBar,\n      setShowBar,\n      isOpenNav,\n      toggleNav,\n      isOpenExpandNav,\n      toggleExpandNav,\n      isLight,\n      toggleLight,\n      locale,\n      setLocale\n    },\n    page: {\n      pageTitles,\n      setPageTitles\n    },\n    info: _objectSpread({}, info, {\n      i18n: false\n    }),\n    navItems,\n    components,\n    functions,\n    constant,\n    resource\n  };\n};\nexport const AppProvider = ({\n  children,\n  data\n}) => {\n  const appState = useAppState(data);\n  const {\n    style: {\n      isLight,\n      toggleLight\n    },\n    info: {}\n  } = appState;\n  React.useEffect(() => {\n    if (process.browser) {\n      // const nextPaletteColors: ThemeOptions['paletteColors'] = JSON.parse(getCookie('paletteColors') || 'null');\n      const nextPaletteType = getCookie('paletteType');\n\n      if (nextPaletteType && nextPaletteType !== (isLight ? 'light' : 'dark')) {\n        toggleLight();\n      }\n    }\n  }, []); // persist paletteType\n\n  React.useEffect(() => {\n    document.cookie = `paletteType=${isLight ? 'light' : 'dark'};path=/;max-age=31536000`;\n  }, [isLight]);\n  const theme = data.style.theme;\n  /*  React.useMemo(() => {\n    return createTheme(data.style.theme, locale as any)(data.style.buildComponents);\n   }, [isLight]); */\n\n  return __jsx(AppContext.Provider, {\n    value: appState\n  }, __jsx(MuiThemeProvider, {\n    theme: theme\n  }, children));\n};\nexport const useAppComponents = () => React.useContext(AppContext).components;\nexport const useLink = () => React.useContext(AppContext).components.Link;\nexport const useRouter = () => React.useContext(AppContext).functions.useRouter();\nexport const useAppInfo = () => React.useContext(AppContext).info;\nexport const useAppConstant = () => React.useContext(AppContext).constant;\nexport const useAppResource = () => React.useContext(AppContext).resource;\nexport const useAppStyle = () => React.useContext(AppContext).style;\nexport const useNavItems = () => React.useContext(AppContext).navItems;\nexport const usePageTitles = () => React.useContext(AppContext).page.pageTitles;\nexport const useSetPageTitles = () => React.useContext(AppContext).page.setPageTitles; //export const useQuery = () => React.useContext(AppContext).functions.query\n\nexport const usePage = () => React.useContext(AppContext).page;","map":null,"metadata":{},"sourceType":"module"}