{"ast":null,"code":"// eslint-disable\n// ⚠️ DO NOT EDIT ⚠️\n// This file is automatically generated, run yarn run graphql:codegen to update\nimport gql from 'graphql-tag';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nexport const RumorsDocument = gql`\n    query Rumors($skip: Int, $first: Int, $searchText: String, $from: DateTime, $to: DateTime) {\n  rumors(first: $first, skip: $skip, where: {recordAt: {gte: $from, lte: $to}, OR: [{title: {contains: $searchText}, content: {contains: $searchText}, subTitle: {contains: $searchText}}]}, orderBy: {recordAt: desc}) {\n    id\n    title\n    content\n    subTitle\n    recordAt\n  }\n}\n    `;\n/**\n * __useRumorsQuery__\n *\n * To run a query within a React component, call `useRumorsQuery` and pass it any options that fit your needs.\n * When your component renders, `useRumorsQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useRumorsQuery({\n *   variables: {\n *      skip: // value for 'skip'\n *      first: // value for 'first'\n *      searchText: // value for 'searchText'\n *      from: // value for 'from'\n *      to: // value for 'to'\n *   },\n * });\n */\n\nexport function useRumorsQuery(baseOptions) {\n  return ApolloReactHooks.useQuery(RumorsDocument, baseOptions);\n}\nexport function useRumorsLazyQuery(baseOptions) {\n  return ApolloReactHooks.useLazyQuery(RumorsDocument, baseOptions);\n}","map":null,"metadata":{},"sourceType":"module"}