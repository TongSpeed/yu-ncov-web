{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useStatByCountryQuery } from '../generated/hook/statByContry.generated';\nimport { getCountryByLastDate, getSumCountry, getLastRecordAtString, getWorldLink, countryTable } from './helper';\nimport { CountryRecord } from './model';\nimport { formatDate } from '../helper/typeHelper';\nimport { template } from './common';\nimport Link from '../components/Link';\nexport var provinces = function provinces(variable) {\n  return {\n    _type: 'page',\n    model: CountryRecord,\n    query: {\n      useQuery: useStatByCountryQuery,\n      queryName: \"countryRecords\",\n      variable: variable\n    },\n    titles: [getWorldLink()],\n    //title: \"世界疫情\",\n    title: {\n      items: [{\n        _type: 'field',\n        field: function field(data) {\n          return getLastRecordAtString(data.items);\n        }\n      }]\n    },\n    // date.current.length > 0 ? `最后更新时间：${formatDate(date.current[0].recordAt)}` : \"\",\n    grid: {\n      xs: 12,\n      sm: 12,\n      md: 12\n    },\n    transform: function transform(as) {\n      var values = as.map(function (a) {\n        return _objectSpread({}, a, {\n          country: a.country.title,\n          countryId: a.country.cuid\n        });\n      });\n      return {\n        current: getSumCountry(values),\n        items: getCountryByLastDate(values)\n      };\n    },\n    items: [].concat(_toConsumableArray(template(\"world\", CountryRecord, function (a) {\n      return a.current;\n    })), [{\n      _type: 'card',\n      title: {\n        items: [{\n          _type: 'field',\n          field: \"各国疫情表\"\n        }]\n      },\n      subTitle: {\n        items: [{\n          _type: 'field',\n          field: function field(date) {\n            return date.length > 0 ? formatDate(date[0].recordAt) : \"疫情表\";\n          }\n        }]\n      },\n      grid: {\n        xs: 12,\n        sm: 12,\n        md: 12\n      },\n      transform: function transform(as) {\n        return as.items;\n      },\n      items: {\n        _type: 'table',\n        grid: {\n          xs: 12,\n          sm: 12,\n          md: 12\n        },\n        model: _objectSpread({}, CountryRecord, {\n          fields: CountryRecord.fields.map(function (a) {\n            if (a.name === 'country') {\n              return _objectSpread({}, a, {\n                formating: function formating(value) {\n                  var name = value ? value['country'] : 'null';\n                  var id = value ? value.countryId : 'null';\n                  return __jsx(Link, {\n                    href: \"/country/[id]\",\n                    as: \"/country/\".concat(id)\n                  }, __jsx(\"a\", null, name));\n                }\n              });\n            } else {\n              return a;\n            }\n          })\n        }),\n        names: countryTable\n      }\n    }])\n  };\n};\nexport default provinces;","map":null,"metadata":{},"sourceType":"module"}