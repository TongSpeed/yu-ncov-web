{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from 'macoolka-ui-components/lib/Container';\nimport { parseStandProp } from 'macoolka-ui-core';\nconst useStyles = makeStyles(theme => ({\n  root: _objectSpread({\n    //flex: '1 1 100%',\n    position: 'relative',\n    //  width: '1160px',\n    outline: 0\n  }, parseStandProp(theme)({\n    mkPaddingBottom: 'large',\n    paddingTop: 80 + 16,\n    left: 0,\n    mkMedia: [{\n      // mkContentWidth: 'small',\n      mkWidth: 'full',\n      mkPaddingH: 'large'\n    }, {\n      mkWidth: 'app_medium'\n    }, {\n      mkWidth: 'app_large',\n      mkBlock: 'center',\n      left: 0\n    }, {\n      left: theme.box.width.nav,\n      width: `calc(100% - ${theme.box.width.nav}px)`,\n      mkPaddingH: 'large'\n    }]\n  }))\n}));\n\nconst AppContent = ({\n  children,\n  className\n}) => {\n  const classes = useStyles();\n  return __jsx(Container, {\n    component: \"main\",\n    id: \"main-content\",\n    tabIndex: -1,\n    className: clsx(classes.root, className)\n  }, children);\n};\n\nexport default AppContent;","map":null,"metadata":{},"sourceType":"module"}