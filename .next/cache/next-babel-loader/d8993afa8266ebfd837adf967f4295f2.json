{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport Error from 'macoolka-ui-components/lib/Error';\nimport InfiniteScroll from 'macoolka-ui-components/lib/InfiniteScroll';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nvar InfiniteScrollQuery = function InfiniteScrollQuery(_ref) {\n  var query = _ref.model.query,\n      callback = _ref.callback,\n      value = _ref.value;\n\n  if (query) {\n    var infiniteScroll = query.infiniteScroll,\n        useQuery = query.useQuery,\n        queryName = query.queryName,\n        variable = query.variable;\n\n    var _useQuery = useQuery({\n      variables: variable\n    }),\n        loading = _useQuery.loading,\n        error = _useQuery.error,\n        data = _useQuery.data,\n        fetchMore = _useQuery.fetchMore;\n\n    if (error) {\n      return __jsx(Error, {\n        title: error.name,\n        content: error.message\n      });\n    }\n\n    var hasMore = true;\n\n    if (data) {\n      var _dataValue = queryName ? data[queryName] : data;\n\n      if (infiniteScroll) {\n        return __jsx(InfiniteScroll, {\n          isLoading: loading,\n          hasMore: hasMore,\n          onLoadMore: function onLoadMore() {\n            return fetchMore({\n              variables: _objectSpread({}, variable, {\n                skip: _dataValue.length\n              }),\n              updateQuery: function updateQuery(prev, _ref2) {\n                var fetchMoreResult = _ref2.fetchMoreResult;\n\n                if (!fetchMoreResult) {\n                  hasMore = false;\n                  return prev;\n                }\n\n                if (fetchMoreResult[queryName].length === 0) {\n                  hasMore = false;\n                  return prev;\n                }\n\n                return _Object$assign({}, prev, _defineProperty({}, queryName, [].concat(_toConsumableArray(prev[queryName]), _toConsumableArray(fetchMoreResult[queryName]))));\n              }\n            });\n          }\n        }, callback(data[queryName]));\n      } else {\n        return callback(_dataValue);\n      }\n    } else if (loading) {\n      return __jsx(CircularProgress, null);\n    }\n  } else {\n    return callback(value);\n  }\n};\n\nexport default InfiniteScrollQuery;","map":null,"metadata":{},"sourceType":"module"}