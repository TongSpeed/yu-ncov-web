{"ast":null,"code":"import Chartist from \"chartist\";\nexport const lineAnimation = ({\n  delays = 80,\n  durations = 500\n}) => ({\n  draw: function (data) {\n    if (data.type === \"line\" || data.type === \"area\") {\n      data.element.animate({\n        d: {\n          begin: 600,\n          dur: 700,\n          from: data.path.clone().scale(1, 0).translate(0, data.chartRect.height()).stringify(),\n          to: data.path.clone().stringify(),\n          easing: Chartist.Svg.Easing.easeOutQuint\n        }\n      });\n    } else if (data.type === \"point\") {\n      data.element.animate({\n        opacity: {\n          begin: (data.index + 1) * delays,\n          dur: durations,\n          from: 0,\n          to: 1,\n          easing: \"ease\"\n        }\n      });\n    } else if (data.type === \"bar\") {\n      data.element.animate({\n        opacity: {\n          begin: (data.index + 1) * delays,\n          dur: durations,\n          from: 0,\n          to: 1,\n          easing: \"ease\"\n        }\n      });\n    }\n  }\n});\nexport const lineOption = ({\n  type,\n  low,\n  high\n}) => {\n  if (type === 'Bar') {\n    return {\n      axisX: {\n        showGrid: false\n      },\n      // low: 0,\n      //   high: 1000,\n      chartPadding: {\n        top: 0,\n        right: 5,\n        bottom: 0,\n        left: 0\n      }\n    };\n  } else {\n    return {\n      lineSmooth: Chartist.Interpolation.cardinal({\n        tension: 0\n      }),\n      //low,\n      // high, // creative tim: we recommend you to set the high sa the biggest value + something for a better look\n      chartPadding: {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0\n      }\n    };\n  }\n};\nexport const responsiveOptions = () => [[\"screen and (max-width: 640px)\", {\n  seriesBarDistance: 5,\n  axisX: {\n    labelInterpolationFnc: function (value) {\n      return value[0];\n    }\n  }\n}]];","map":null,"metadata":{},"sourceType":"module"}