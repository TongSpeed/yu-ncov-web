{"ast":null,"code":"import { get } from 'macoolka-object';\nimport * as A from 'fp-ts/lib/Array';\nimport * as O from 'fp-ts/lib/Option';\nimport { pipe } from 'fp-ts/lib/pipeable';\nimport * as dateFns from 'date-fns';\nimport { isMaybe, isString, isFunction } from 'macoolka-predicate';\n\nvar getDefaultValue = function getDefaultValue(defaultValue) {\n  return defaultValue === 'now' ? new Date().toISOString() : defaultValue === 'yesterday' ? dateFns.addDays(new Date(), -1).toISOString() : defaultValue;\n};\n\nexport var getFieldValue = function getFieldValue(field) {\n  return function (a) {\n    return get(a, field.name, getDefaultValue(field.defaultValue));\n  };\n};\nexport var convertFieldValueToString = function convertFieldValueToString(field) {\n  return function (a) {\n    var value = getFieldValue(field)(a);\n\n    if (isMaybe(value)) {\n      return '';\n    }\n\n    switch (field.type) {\n      case 'int':\n      case 'number':\n        return String(value);\n\n      case 'date':\n        return dateFns.format(new Date(value), field.format ? field.format : 'yyyy年MM月dd日');\n\n      case 'datetime':\n        return dateFns.format(new Date(value), field.format ? field.format : 'yyyy年MM月dd日 HH:mm');\n\n      default:\n        return value;\n    }\n  };\n};\nexport var convertFieldValueToNode = function convertFieldValueToNode(field) {\n  return function (a) {\n    var value = getFieldValue(field)(a);\n\n    if (isMaybe(value)) {\n      return null;\n    }\n\n    switch (field.type) {\n      case 'date':\n        return dateFns.format(new Date(value), field.format ? field.format : 'yyyy年MM月dd日');\n\n      case 'datetime':\n        return dateFns.format(new Date(value), field.format ? field.format : 'yyyy年MM月dd日 HH:mm');\n\n      default:\n        return value;\n    }\n  };\n};\nexport var getField = function getField(_ref) {\n  var fields = _ref.fields;\n  return function (name) {\n    var value = pipe(fields, A.findFirst(function (a) {\n      return a.name === name;\n    }));\n\n    if (O.isSome(value)) {\n      return value.value;\n    } else {\n      throw new Error(\"Field\".concat(name, \" not found \"));\n    }\n  };\n};\nexport var getFields = function getFields(model) {\n  return function (names) {\n    return names.map(getField(model));\n  };\n};\nexport var group = function group(S) {\n  return A.chop(function (as) {\n    var _A$spanLeft = A.spanLeft(function (a) {\n      return S.equals(a, as[0]);\n    })(as),\n        init = _A$spanLeft.init,\n        rest = _A$spanLeft.rest;\n\n    return [init, rest];\n  });\n};\nexport var getTFieldValue = function getTFieldValue(model) {\n  return function (value) {\n    return function (fieldValue) {\n      if (isMaybe(fieldValue)) return undefined;\n      if (isString(fieldValue)) return fieldValue;else if (isFunction(fieldValue)) return fieldValue(value);else {\n        var field;\n\n        if (!isString(fieldValue.field)) {\n          field = fieldValue.field;\n        } else {\n          if (isMaybe(model)) {\n            throw new Error(\"model can not is null \".concat(fieldValue.field, \" \"));\n          }\n\n          field = getField(model)(fieldValue.field);\n        }\n\n        if (fieldValue.type === 'label') {\n          return field.title;\n        } else {\n          if (field.formating) {\n            return field.formating(value);\n          } else {\n            return convertFieldValueToNode(field)(value);\n          }\n        }\n      }\n    };\n  };\n};","map":null,"metadata":{},"sourceType":"module"}