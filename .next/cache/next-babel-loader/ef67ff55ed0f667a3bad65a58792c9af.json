{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { ServerStyleSheets } from '@material-ui/styles';\nimport Document, { Head, Main, NextScript } from 'next/document'; //import postcss from 'postcss';\n//import * as prefixer from 'autoprefixer';\n//import * as cleanCSS from 'clean-css';\n\nconst GOOGLE_ID = true ? 'UA-106598593-2' : 'UA-106598593-3';\nexport default class MyDocument extends Document {\n  render() {\n    // const { canonical, userLanguage } = this.props;\n    return __jsx(\"html\", {\n      lang: 'zh'\n    }, __jsx(Head, null, __jsx(\"link\", {\n      rel: \"manifest\",\n      href: \"/static/manifest.json\"\n    }), __jsx(\"link\", {\n      rel: \"shortcut icon\",\n      href: \"/static/favicon.ico\"\n    }), __jsx(\"link\", {\n      rel: \"apple-touch-icon\",\n      sizes: \"180x180\",\n      href: \"/static/icons/180x180.png\"\n    }), __jsx(\"style\", {\n      id: \"material-icon-font\"\n    }), __jsx(\"style\", {\n      id: \"font-awesome-css\"\n    }), __jsx(\"style\", {\n      id: \"app-search\"\n    }), __jsx(\"style\", {\n      id: \"prismjs\"\n    }), __jsx(\"style\", {\n      id: \"insertion-point-jss\"\n    }), __jsx(\"link\", {\n      href: \"/static/chartist.min.css\",\n      rel: \"stylesheet\"\n    }), __jsx(\"link\", {\n      href: \"/static/root.css\",\n      rel: \"stylesheet\"\n    })), __jsx(\"body\", null, __jsx(Main, null), __jsx(\"script\", {\n      // eslint-disable-next-line react/no-danger\n      dangerouslySetInnerHTML: {\n        __html: `\n                window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;\n                window.ga('create','${GOOGLE_ID}','auto');\n              `\n      }\n    }), __jsx(NextScript, null)));\n  }\n\n}\n\nMyDocument.getInitialProps = async ctx => {\n  // Resolution order\n  //\n  // On the server:\n  // 1. page.getInitialProps\n  // 2. document.getInitialProps\n  // 3. page.render\n  // 4. document.render\n  //\n  // On the server with error:\n  // 2. document.getInitialProps\n  // 3. page.render\n  // 4. document.render\n  //\n  // On the client\n  // 1. page.getInitialProps\n  // 3. page.render\n  // Render app and page and get the context of the page with collected side effects.\n  const sheets = new ServerStyleSheets();\n  const originalRenderPage = ctx.renderPage;\n\n  ctx.renderPage = () => originalRenderPage({\n    enhanceApp: App => props => sheets.collect(__jsx(App, props))\n  });\n\n  const initialProps = await Document.getInitialProps(ctx);\n  let css = sheets.toString(); //const req=ctx.req\n  // const canonical=req && req.url && pathnameToLanguage(req.url).canonical \n  // It might be undefined, e.g. after an error.\n  //if (css && process.env.NODE_ENV === 'production') {\n\n  /* const result1 = await prefixer.process(css, { from: undefined });\n  css = result1.css;\n  css = cleanCSS.minify(css).styles; */\n  //}\n\n  return _objectSpread({}, initialProps, {\n    // canonical: canonical,\n    // userLanguage: ctx.query.userLanguage || 'en',\n    styles: [...React.Children.toArray(initialProps.styles), __jsx(\"style\", {\n      id: \"jss-server-side\",\n      key: \"jss-server-side\" // eslint-disable-next-line react/no-danger\n      ,\n      dangerouslySetInnerHTML: {\n        __html: css\n      }\n    })]\n  });\n};","map":null,"metadata":{},"sourceType":"module"}