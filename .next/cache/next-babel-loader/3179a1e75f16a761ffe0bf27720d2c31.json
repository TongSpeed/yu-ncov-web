{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport { defaultValue, standChinaTable, standTable } from './helper';\nimport Accessibility from \"@material-ui/icons/Accessibility\";\nimport * as A from 'fp-ts/lib/Array';\nimport { pipe } from 'fp-ts/lib/pipeable';\nimport * as O from 'fp-ts/lib/Option';\nimport { BasicRecord } from './model';\nimport { formatDateTime } from '../helper/typeHelper';\n\nvar keys = function keys() {\n  var isCountry = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n  return [{\n    name: 'confirmedCount',\n    color: 'danger'\n  }].concat(_toConsumableArray(isCountry ? [{\n    name: 'suspectedCount',\n    color: 'warning'\n  }] : []), [{\n    name: 'deadCount',\n    color: 'primary'\n  }, {\n    name: 'curedCount',\n    color: 'info'\n  }]);\n};\n\nvar keysAdd = function keysAdd() {\n  var isCountry = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n  return [{\n    name: 'confirmedCountAdd',\n    color: 'danger'\n  }].concat(_toConsumableArray(isCountry ? [{\n    name: 'suspectedCountAdd',\n    color: 'warning'\n  }] : []), [{\n    name: 'deadCountAdd',\n    color: 'primary'\n  }, {\n    name: 'curedCountAdd',\n    color: 'info'\n  }]);\n};\n\nvar keysAddRate = function keysAddRate() {\n  var isCountry = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n  return [{\n    name: 'confirmedCountAddRate',\n    color: 'danger'\n  }].concat(_toConsumableArray(isCountry ? [{\n    name: 'suspectedCountAddRate',\n    color: 'warning'\n  }] : []), [{\n    name: 'deadCountAddRate',\n    color: 'primary'\n  }, {\n    name: 'curedCountAddRate',\n    color: 'info'\n  }]);\n};\n\nexport var keyCard = function keyCard(_ref) {\n  var name = _ref.name,\n      color = _ref.color;\n  return {\n    _type: 'keycard',\n    grid: {\n      xs: 12,\n      sm: 6,\n      md: 3\n    },\n    HeadIcon: Accessibility,\n    title: {\n      items: [{\n        _type: 'field',\n        field: {\n          field: name,\n          type: 'label'\n        }\n      }]\n    },\n    subTitle: {\n      items: [{\n        _type: 'field',\n        field: {\n          field: name,\n          type: 'value'\n        }\n      }]\n    },\n    footer: {\n      items: {\n        _type: 'field',\n        field: function field(a) {\n          return \"\\u6BD4\\u6628\\u65E5 \\u589E\\u52A0\\u6570\\u91CF:\".concat(a[name + 'Add']);\n        },\n        type: 'paragraph'\n      }\n    },\n    color: color\n  };\n}; //增加比率:${a[name + 'AddRate']\n\nexport var chart = function chart(_ref2) {\n  var name = _ref2.name,\n      color = _ref2.color;\n  return {\n    _type: 'card',\n    model: BasicRecord,\n    grid: {\n      xs: 12,\n      sm: 12,\n      md: 6\n    },\n    title: {\n      items: [{\n        _type: 'field',\n        field: {\n          field: name,\n          type: 'label'\n        }\n      }]\n    },\n    color: color,\n    cardType: 'media',\n    subTitle: {\n      items: [{\n        _type: 'field',\n        field: function field(_) {\n          return \"疫情趋势图\";\n        }\n      }]\n    },\n    items: {\n      model: BasicRecord,\n      _type: 'chart',\n      lableName: 'recordAt',\n      valueNames: [name],\n      hideLabels: [true, true, false, false]\n    }\n  };\n};\nexport var template = function template(type, model, getData) {\n  return [{\n    _type: 'row',\n    title: {\n      items: [{\n        _type: 'field',\n        field: '关键指标'\n      }]\n    },\n    divider: 'down',\n    grid: {\n      xs: 12,\n      sm: 12,\n      md: 12\n    },\n    transform: function transform(as) {\n      as = getData ? getData(as) : as;\n      return pipe(as, A.reverse, A.head, O.getOrElse(function () {\n        return defaultValue;\n      }));\n    },\n    items: keys(type === 'country').map(keyCard)\n  }, {\n    _type: 'row',\n    title: {\n      items: [{\n        _type: 'field',\n        field: '疫情标准统计图'\n      }]\n    },\n    divider: 'down',\n    transform: function transform(as) {\n      as = getData ? getData(as) : as;\n      return pipe(as, A.reverse, function (as) {\n        return as.slice(0, 14);\n      }, A.reverse);\n    },\n    grid: {\n      xs: 12,\n      sm: 12,\n      md: 12\n    },\n    items: keys(type === 'country').map(chart)\n  }, {\n    _type: 'row',\n    title: {\n      items: [{\n        _type: 'field',\n        field: '疫情增量统计图'\n      }]\n    },\n    divider: 'down',\n    transform: function transform(as) {\n      as = getData ? getData(as) : as;\n      return pipe(as, A.reverse, function (as) {\n        return as.slice(0, 14);\n      }, A.reverse);\n    },\n    grid: {\n      xs: 12,\n      sm: 12,\n      md: 12\n    },\n    items: keysAdd(type === 'country').map(chart)\n  }, {\n    _type: 'row',\n    title: {\n      items: [{\n        _type: 'field',\n        field: '疫情增率统计图'\n      }]\n    },\n    divider: 'down',\n    transform: function transform(as) {\n      as = getData ? getData(as) : as;\n      return pipe(as, A.reverse, function (as) {\n        return as.slice(0, 14);\n      }, A.reverse);\n    },\n    grid: {\n      xs: 12,\n      sm: 12,\n      md: 12\n    },\n    items: keysAddRate(type === 'country').map(chart)\n  }, {\n    _type: 'card',\n    title: {\n      items: [{\n        _type: 'field',\n        field: '疫情数据'\n      }]\n    },\n    transform: function transform(as) {\n      as = getData ? getData(as) : as;\n      return as;\n    },\n    subTitle: {\n      items: [{\n        _type: 'field',\n        field: function field(data) {\n          return data.length > 0 ? formatDateTime()(data[data.length - 1].recordAt) : \"\";\n        }\n      }]\n    },\n    divider: 'down',\n    grid: {\n      xs: 12,\n      sm: 12,\n      md: 12\n    },\n    items: {\n      model: model,\n      _type: 'table',\n      names: type === 'country' ? standChinaTable : standTable\n    }\n  }];\n};","map":null,"metadata":{},"sourceType":"module"}