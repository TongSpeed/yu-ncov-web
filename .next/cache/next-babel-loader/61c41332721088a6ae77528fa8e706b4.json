{"ast":null,"code":"import { mutationType, stringArg } from 'nexus';\nimport { passwordValid, token, hashPassword } from '../utils';\nexport const Mutation = mutationType({\n  definition(t) {\n    t.field('signup', {\n      type: 'AuthPayload',\n      args: {\n        name: stringArg(),\n        nickname: stringArg(),\n        email: stringArg({\n          nullable: false\n        }),\n        password: stringArg({\n          nullable: false\n        })\n      },\n      resolve: async (_parent, {\n        name,\n        email,\n        password,\n        nickname\n      }, ctx) => {\n        const hashedPassword = await hashPassword()(password)();\n        const user = await ctx.prisma.user.create({\n          data: {\n            name,\n            nickname: nickname,\n            email,\n            password: hashedPassword\n          }\n        });\n        return {\n          token: token(user.id),\n          user\n        };\n      }\n    });\n    t.field('login', {\n      type: 'AuthPayload',\n      args: {\n        email: stringArg({\n          nullable: false\n        }),\n        password: stringArg({\n          nullable: false\n        })\n      },\n      resolve: async (_parent, {\n        email,\n        password\n      }, ctx) => {\n        const user = await ctx.prisma.user.findOne({\n          where: {\n            email\n          }\n        });\n\n        if (!user) {\n          throw new Error(`No user found for email: ${email}`);\n        }\n\n        const passwordPass = await passwordValid(password, user.password)();\n\n        if (!passwordPass) {\n          throw new Error('Invalid password');\n        }\n\n        return {\n          token: token(user.id),\n          user\n        };\n      }\n    });\n  }\n\n});","map":null,"metadata":{},"sourceType":"module"}