{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useStatByCityQuery } from '../generated/hook/statByCity.generated';\nimport { toVirusRecords, ordRecordAt, getCountryLink, getProvinceLink, getCityLink, getWorldLink, getLastRecordAtString } from './helper';\nimport * as A from 'fp-ts/lib/Array';\nimport { pipe } from 'fp-ts/lib/pipeable';\nimport * as O from 'fp-ts/lib/Option';\nimport { CityRecord } from './model';\nimport { template } from './common';\nexport const city = variable => ({\n  _type: 'page',\n  model: CityRecord,\n  query: {\n    useQuery: useStatByCityQuery,\n    queryName: \"cityRecords\",\n    variable\n  },\n  titles: as => pipe(as, A.head, O.map(a => [getWorldLink(), getCountryLink(a), getProvinceLink(a), getCityLink(a)]), O.getOrElse(() => [])),\n  title: {\n    items: [{\n      _type: 'field',\n      field: as => getLastRecordAtString(as)\n    }]\n  },\n  transform: as => {\n    return pipe(as, A.map(a => _objectSpread({}, a, {\n      country: a.country.title,\n      province: a.province.title,\n      city: a.city.title,\n      countryId: a.country.cuid,\n      provinceId: a.province.cuid,\n      cityId: a.city.cuid\n    })), A.sort(ordRecordAt), A.reverse, as => toVirusRecords(as), A.reverse);\n  },\n  items: [...template(\"city\", CityRecord)]\n});\nexport default city;","map":null,"metadata":{},"sourceType":"module"}