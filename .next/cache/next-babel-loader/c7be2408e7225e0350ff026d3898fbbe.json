{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport App from 'next/app';\nimport Root from '../src/app/App';\nimport { AppProvider } from '../src/app/AppContext';\nimport Head from 'next/head';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport appOption from '../data';\nimport fetch from 'isomorphic-unfetch';\nexport let apolloClient = null;\nexport const initApolloClient = (initialState = {}) => {\n  console.log(process.env.GRAPHQL_URL);\n  const link = new HttpLink({\n    uri: \"http://localhost:3000/api/graphql\",\n    credentials: 'same-origin',\n    fetch\n  });\n\n  const createApolloClient = (initialState = {}) => {\n    return new ApolloClient({\n      ssrMode: true,\n      link,\n      cache: new InMemoryCache().restore(initialState)\n    });\n  };\n\n  if (true) {\n    return createApolloClient(initialState);\n  }\n\n  if (!apolloClient) {\n    apolloClient = createApolloClient(initialState);\n  }\n\n  return apolloClient;\n};\nexport default class MyApp extends App {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"client\", apolloClient || initApolloClient(this.props.apolloState));\n  }\n\n  render() {\n    const {\n      Component,\n      pageProps\n    } = this.props;\n    return __jsx(ApolloProvider, {\n      client: this.client\n    }, __jsx(AppProvider, {\n      data: appOption\n    }, __jsx(Root, null, __jsx(Component, pageProps))));\n  }\n\n}\n\nMyApp.getInitialProps = async ({\n  ctx\n}) => {\n  const {\n    AppTree\n  } = ctx;\n  apolloClient = initApolloClient();\n  let pageProps = {};\n\n  if (true) {\n    try {\n      const {\n        getDataFromTree\n      } = await import('@apollo/react-ssr');\n      await getDataFromTree(__jsx(AppTree, {\n        pageProps: _objectSpread({}, pageProps)\n      }));\n    } catch (error) {\n      console.error('Error while running `getDataFromTree`', error);\n    }\n\n    Head.rewind();\n  }\n\n  const apolloState = apolloClient.cache.extract();\n  return {\n    pageProps,\n    apolloState\n  };\n};","map":null,"metadata":{},"sourceType":"module"}