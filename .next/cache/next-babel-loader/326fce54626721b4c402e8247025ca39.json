{"ast":null,"code":"import { get } from 'macoolka-object';\nimport * as A from 'fp-ts/lib/Array';\nimport * as O from 'fp-ts/lib/Option';\nimport { pipe } from 'fp-ts/lib/pipeable';\nimport * as dateFns from 'date-fns';\nimport { isMaybe, isString, isFunction } from 'macoolka-predicate';\n\nconst getDefaultValue = defaultValue => defaultValue === 'now' ? new Date().toISOString() : defaultValue === 'yesterday' ? dateFns.addDays(new Date(), -1).toISOString() : defaultValue;\n\nexport const getFieldValue = field => a => {\n  return get(a, field.name, getDefaultValue(field.defaultValue));\n};\nexport const convertFieldValueToString = field => a => {\n  const value = getFieldValue(field)(a);\n\n  if (isMaybe(value)) {\n    return '';\n  }\n\n  switch (field.type) {\n    case 'int':\n    case 'number':\n      return String(value);\n\n    case 'date':\n      return dateFns.format(new Date(value), field.format ? field.format : 'yyyy年MM月dd日');\n\n    case 'datetime':\n      return dateFns.format(new Date(value), field.format ? field.format : 'yyyy年MM月dd日 HH:mm');\n\n    default:\n      return value;\n  }\n};\nexport const convertFieldValueToNode = field => a => {\n  const value = getFieldValue(field)(a);\n\n  if (isMaybe(value)) {\n    return null;\n  }\n\n  switch (field.type) {\n    case 'date':\n      return dateFns.format(new Date(value), field.format ? field.format : 'yyyy年MM月dd日');\n\n    case 'datetime':\n      return dateFns.format(new Date(value), field.format ? field.format : 'yyyy年MM月dd日 HH:mm');\n\n    default:\n      return value;\n  }\n};\nexport const getField = ({\n  fields\n}) => name => {\n  const value = pipe(fields, A.findFirst(a => a.name === name));\n\n  if (O.isSome(value)) {\n    return value.value;\n  } else {\n    throw new Error(`Field${name} not found `);\n  }\n};\nexport const getFields = model => names => {\n  return names.map(getField(model));\n};\nexport const group = S => {\n  return A.chop(as => {\n    const {\n      init,\n      rest\n    } = A.spanLeft(a => S.equals(a, as[0]))(as);\n    return [init, rest];\n  });\n};\nexport const getTFieldValue = model => value => fieldValue => {\n  if (isMaybe(fieldValue)) return undefined;\n  if (isString(fieldValue)) return fieldValue;else if (isFunction(fieldValue)) return fieldValue(value);else {\n    let field;\n\n    if (!isString(fieldValue.field)) {\n      field = fieldValue.field;\n    } else {\n      if (isMaybe(model)) {\n        throw new Error(`model can not is null ${fieldValue.field} `);\n      }\n\n      field = getField(model)(fieldValue.field);\n    }\n\n    if (fieldValue.type === 'label') {\n      return field.title;\n    } else {\n      if (field.formating) {\n        return field.formating(value);\n      } else {\n        return convertFieldValueToNode(field)(value);\n      }\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}