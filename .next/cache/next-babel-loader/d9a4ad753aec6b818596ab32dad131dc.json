{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport GridContainer from \"../dashboard/Grid/GridContainer\";\nimport GridItem from \"../dashboard/Grid/GridItem\";\nimport { isArray } from 'macoolka-predicate';\nimport Page from './Page';\nimport KeyCard from './KeyCard';\nimport Chart from './Chart';\nimport Table from './Table';\nimport Card from './Card';\nimport Container from './Contaner';\nimport FieldDisplay from './FieldDisplay';\nimport Query from './Query';\nlet key = 0;\n\nconst toChildModel = parent => child => _objectSpread({\n  model: parent.model\n}, child);\n\nconst ModelView = ({\n  model,\n  value\n}) => {\n  const {\n    transform\n  } = model;\n\n  const toGrid = ({\n    grid\n  }) => a => grid ? __jsx(GridItem, grid, a) : a;\n\n  const toItems = v => param => {\n    if (param) {\n      const {\n        items,\n        isList = false\n      } = param;\n\n      const toDataList = f => {\n        return isList ? v.map(f) : f(v);\n      };\n\n      if (isArray(items)) {\n        return toDataList(a => items.map(m => __jsx(ModelView, {\n          key: key++,\n          model: toChildModel(model)(m),\n          value: a\n        })));\n      } else {\n        return toDataList(a => __jsx(ModelView, {\n          key: key++,\n          model: toChildModel(model)(items),\n          value: a\n        }));\n      }\n    } else {\n      return null;\n    }\n  };\n\n  const to = _a => {\n    const a = transform ? transform(_a) : _a;\n    let R;\n\n    switch (model._type) {\n      case 'row':\n        {\n          R = __jsx(Container, {\n            model: model,\n            value: a,\n            title: toItems(a)(model.title),\n            subTitle: toItems(a)(model.subTitle)\n          }, \" \", toItems(a)(model));\n          break;\n        }\n\n      case 'page':\n        {\n          R = __jsx(Page, {\n            model: model,\n            value: a,\n            title: toItems(a)(model.title),\n            subTitle: toItems(a)(model.subTitle)\n          }, \" \", toItems(a)(model));\n          break;\n        }\n\n      case 'keycard':\n        R = __jsx(KeyCard, {\n          model: model,\n          value: a,\n          title: toItems(a)(model.title),\n          subTitle: toItems(a)(model.subTitle),\n          footer: toItems(a)(model.footer)\n        }, \" \");\n        break;\n\n      case 'card':\n        R = __jsx(Card, {\n          model: model,\n          value: a,\n          title: toItems(a)(model.title),\n          subTitle: toItems(a)(model.subTitle),\n          footer: toItems(a)(model.footer)\n        }, \" \", toItems(a)(model));\n        break;\n\n      case 'chart':\n        R = __jsx(Chart, {\n          model: model,\n          value: a\n        }, \" \");\n        break;\n\n      case 'table':\n        R = __jsx(Table, {\n          model: model,\n          value: a\n        }, \" \");\n        break;\n\n      case 'field':\n        R = __jsx(FieldDisplay, {\n          model: model,\n          value: a\n        }, \" \");\n        break;\n\n      default:\n        R = __jsx(GridContainer, null, \" \");\n        break;\n    }\n\n    return toGrid(model)(R);\n  };\n\n  return __jsx(Query, {\n    callback: to,\n    model: model,\n    value: value\n  });\n};\n\nexport default ModelView;","map":null,"metadata":{},"sourceType":"module"}