{"ast":null,"code":"// eslint-disable\n// ⚠️ DO NOT EDIT ⚠️\n// This file is automatically generated, run yarn run graphql:codegen to update\nimport gql from 'graphql-tag';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nexport const StatByProvinceDocument = gql`\n    query statByProvince($orderBy: ProvinceRecordOrderByInput = {recordAt: desc}, $from: DateTime, $to: DateTime, $country: String, $province: [String!]) {\n  provinceRecords(orderBy: $orderBy, where: {recordAt: {gte: $from, lte: $to}, province: {cuid: {in: $province}, NOT: {id: {contains: \"�\"}}}, country: {cuid: {equals: $country}, NOT: {id: {contains: \"�\"}}}}) {\n    country {\n      id\n      title\n      cuid\n    }\n    province {\n      id\n      title\n      cuid\n    }\n    curedCount\n    recordAt\n    deadCount\n    suspectedCount\n    confirmedCount\n  }\n}\n    `;\n/**\n * __useStatByProvinceQuery__\n *\n * To run a query within a React component, call `useStatByProvinceQuery` and pass it any options that fit your needs.\n * When your component renders, `useStatByProvinceQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useStatByProvinceQuery({\n *   variables: {\n *      orderBy: // value for 'orderBy'\n *      from: // value for 'from'\n *      to: // value for 'to'\n *      country: // value for 'country'\n *      province: // value for 'province'\n *   },\n * });\n */\n\nexport function useStatByProvinceQuery(baseOptions) {\n  return ApolloReactHooks.useQuery(StatByProvinceDocument, baseOptions);\n}\nexport function useStatByProvinceLazyQuery(baseOptions) {\n  return ApolloReactHooks.useLazyQuery(StatByProvinceDocument, baseOptions);\n}","map":null,"metadata":{},"sourceType":"module"}