{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useStatByProvinceQuery } from '../generated/hook/statByProvince.generated';\nimport { getProvincesByLastDate, provinceTable } from './helper';\nimport { ProvinceRecord } from './model';\nimport { formatDate } from '../helper/typeHelper';\nimport { pipe } from 'fp-ts/lib/pipeable';\nimport Link from '../components/Link';\nexport const provinces = variable => ({\n  _type: 'card',\n  model: ProvinceRecord,\n  query: {\n    useQuery: useStatByProvinceQuery,\n    queryName: \"provinceRecords\",\n    variable\n  },\n  title: {\n    items: [{\n      _type: 'field',\n      field: \"各省疫情表\"\n    }]\n  },\n  subTitle: {\n    items: [{\n      _type: 'field',\n      field: date => date.length > 0 ? formatDate(date[0].recordAt) : \"疫情表\"\n    }]\n  },\n  grid: {\n    xs: 12,\n    sm: 12,\n    md: 12\n  },\n  transform: as => {\n    const values = as.map(a => _objectSpread({}, a, {\n      province: a.province.title,\n      country: a.country.title,\n      provinceId: a.province.cuid,\n      countryId: a.country.cuid\n    }));\n    return pipe(values, getProvincesByLastDate);\n  },\n  items: {\n    _type: 'table',\n    grid: {\n      xs: 12,\n      sm: 12,\n      md: 12\n    },\n    model: _objectSpread({}, ProvinceRecord, {\n      fields: ProvinceRecord.fields.map(a => {\n        if (a.name === 'province') {\n          return _objectSpread({}, a, {\n            formating: value => {\n              const name = value ? value['province'] : 'null';\n              const id = value ? value.provinceId : 'null';\n              return __jsx(Link, {\n                href: `/province/[id]`,\n                as: `/province/${id}`\n              }, __jsx(\"a\", null, name));\n            }\n          });\n        } else {\n          return a;\n        }\n      })\n    }),\n    names: provinceTable\n  }\n});\nexport default provinces;","map":null,"metadata":{},"sourceType":"module"}