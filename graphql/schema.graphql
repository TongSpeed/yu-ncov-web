### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type Area {
  city: City!
  id: String!
  title: String!
}

input AreaCreateManyWithoutCityInput {
  connect: [AreaWhereUniqueInput!]
  create: [AreaCreateWithoutCityInput!]
}

input AreaCreateOneWithoutVirusRecordsInput {
  connect: AreaWhereUniqueInput
  create: AreaCreateWithoutVirusRecordsInput
}

input AreaCreateWithoutCityInput {
  id: String
  title: String!
  virusRecords: VirusRecordCreateManyWithoutAreaInput
}

input AreaCreateWithoutVirusRecordsInput {
  city: CityCreateOneWithoutAreasInput!
  id: String
  title: String!
}

input AreaFilter {
  every: AreaWhereInput
  none: AreaWhereInput
  some: AreaWhereInput
}

input AreaOrderByInput {
  id: OrderByArg
  title: OrderByArg
}

input AreaScalarWhereInput {
  AND: [AreaScalarWhereInput!]
  id: StringFilter
  NOT: [AreaScalarWhereInput!]
  OR: [AreaScalarWhereInput!]
  title: StringFilter
  virusRecords: VirusRecordFilter
}

input AreaUpdateManyDataInput {
  id: String
  title: String
}

input AreaUpdateManyWithoutCityInput {
  connect: [AreaWhereUniqueInput!]
  create: [AreaCreateWithoutCityInput!]
  delete: [AreaWhereUniqueInput!]
  deleteMany: [AreaScalarWhereInput!]
  disconnect: [AreaWhereUniqueInput!]
  set: [AreaWhereUniqueInput!]
  update: [AreaUpdateWithWhereUniqueWithoutCityInput!]
  updateMany: [AreaUpdateManyWithWhereNestedInput!]
  upsert: [AreaUpsertWithWhereUniqueWithoutCityInput!]
}

input AreaUpdateManyWithWhereNestedInput {
  data: AreaUpdateManyDataInput!
  where: AreaScalarWhereInput!
}

input AreaUpdateOneWithoutVirusRecordsInput {
  connect: AreaWhereUniqueInput
  create: AreaCreateWithoutVirusRecordsInput
  delete: Boolean
  disconnect: Boolean
  update: AreaUpdateWithoutVirusRecordsDataInput
  upsert: AreaUpsertWithoutVirusRecordsInput
}

input AreaUpdateWithoutCityDataInput {
  id: String
  title: String
  virusRecords: VirusRecordUpdateManyWithoutAreaInput
}

input AreaUpdateWithoutVirusRecordsDataInput {
  city: CityUpdateOneRequiredWithoutAreasInput
  id: String
  title: String
}

input AreaUpdateWithWhereUniqueWithoutCityInput {
  data: AreaUpdateWithoutCityDataInput!
  where: AreaWhereUniqueInput!
}

input AreaUpsertWithoutVirusRecordsInput {
  create: AreaCreateWithoutVirusRecordsInput!
  update: AreaUpdateWithoutVirusRecordsDataInput!
}

input AreaUpsertWithWhereUniqueWithoutCityInput {
  create: AreaCreateWithoutCityInput!
  update: AreaUpdateWithoutCityDataInput!
  where: AreaWhereUniqueInput!
}

input AreaWhereInput {
  AND: [AreaWhereInput!]
  city: CityWhereInput
  id: StringFilter
  NOT: [AreaWhereInput!]
  OR: [AreaWhereInput!]
  title: StringFilter
  virusRecords: VirusRecordFilter
}

input AreaWhereUniqueInput {
  id: String
}

type AuthPayload {
  token: String!
  user: User!
}

input BooleanFilter {
  equals: Boolean
  not: Boolean
}

type City {
  areas(after: String, before: String, first: Int, last: Int, skip: Int): [Area!]!
  id: String!
  province: Province!
  title: String!
}

input CityCreateManyWithoutProvinceInput {
  connect: [CityWhereUniqueInput!]
  create: [CityCreateWithoutProvinceInput!]
}

input CityCreateOneWithoutAreasInput {
  connect: CityWhereUniqueInput
  create: CityCreateWithoutAreasInput
}

input CityCreateOneWithoutVirusRecordsInput {
  connect: CityWhereUniqueInput
  create: CityCreateWithoutVirusRecordsInput
}

input CityCreateWithoutAreasInput {
  id: String
  province: ProvinceCreateOneWithoutCitiesInput!
  title: String!
  virusRecords: VirusRecordCreateManyWithoutCityInput
}

input CityCreateWithoutProvinceInput {
  areas: AreaCreateManyWithoutCityInput
  id: String
  title: String!
  virusRecords: VirusRecordCreateManyWithoutCityInput
}

input CityCreateWithoutVirusRecordsInput {
  areas: AreaCreateManyWithoutCityInput
  id: String
  province: ProvinceCreateOneWithoutCitiesInput!
  title: String!
}

input CityFilter {
  every: CityWhereInput
  none: CityWhereInput
  some: CityWhereInput
}

input CityOrderByInput {
  id: OrderByArg
  title: OrderByArg
}

input CityScalarWhereInput {
  AND: [CityScalarWhereInput!]
  areas: AreaFilter
  id: StringFilter
  NOT: [CityScalarWhereInput!]
  OR: [CityScalarWhereInput!]
  title: StringFilter
  virusRecords: VirusRecordFilter
}

input CityUpdateManyDataInput {
  id: String
  title: String
}

input CityUpdateManyWithoutProvinceInput {
  connect: [CityWhereUniqueInput!]
  create: [CityCreateWithoutProvinceInput!]
  delete: [CityWhereUniqueInput!]
  deleteMany: [CityScalarWhereInput!]
  disconnect: [CityWhereUniqueInput!]
  set: [CityWhereUniqueInput!]
  update: [CityUpdateWithWhereUniqueWithoutProvinceInput!]
  updateMany: [CityUpdateManyWithWhereNestedInput!]
  upsert: [CityUpsertWithWhereUniqueWithoutProvinceInput!]
}

input CityUpdateManyWithWhereNestedInput {
  data: CityUpdateManyDataInput!
  where: CityScalarWhereInput!
}

input CityUpdateOneRequiredWithoutAreasInput {
  connect: CityWhereUniqueInput
  create: CityCreateWithoutAreasInput
  update: CityUpdateWithoutAreasDataInput
  upsert: CityUpsertWithoutAreasInput
}

input CityUpdateOneWithoutVirusRecordsInput {
  connect: CityWhereUniqueInput
  create: CityCreateWithoutVirusRecordsInput
  delete: Boolean
  disconnect: Boolean
  update: CityUpdateWithoutVirusRecordsDataInput
  upsert: CityUpsertWithoutVirusRecordsInput
}

input CityUpdateWithoutAreasDataInput {
  id: String
  province: ProvinceUpdateOneRequiredWithoutCitiesInput
  title: String
  virusRecords: VirusRecordUpdateManyWithoutCityInput
}

input CityUpdateWithoutProvinceDataInput {
  areas: AreaUpdateManyWithoutCityInput
  id: String
  title: String
  virusRecords: VirusRecordUpdateManyWithoutCityInput
}

input CityUpdateWithoutVirusRecordsDataInput {
  areas: AreaUpdateManyWithoutCityInput
  id: String
  province: ProvinceUpdateOneRequiredWithoutCitiesInput
  title: String
}

input CityUpdateWithWhereUniqueWithoutProvinceInput {
  data: CityUpdateWithoutProvinceDataInput!
  where: CityWhereUniqueInput!
}

input CityUpsertWithoutAreasInput {
  create: CityCreateWithoutAreasInput!
  update: CityUpdateWithoutAreasDataInput!
}

input CityUpsertWithoutVirusRecordsInput {
  create: CityCreateWithoutVirusRecordsInput!
  update: CityUpdateWithoutVirusRecordsDataInput!
}

input CityUpsertWithWhereUniqueWithoutProvinceInput {
  create: CityCreateWithoutProvinceInput!
  update: CityUpdateWithoutProvinceDataInput!
  where: CityWhereUniqueInput!
}

input CityWhereInput {
  AND: [CityWhereInput!]
  areas: AreaFilter
  id: StringFilter
  NOT: [CityWhereInput!]
  OR: [CityWhereInput!]
  province: ProvinceWhereInput
  title: StringFilter
  virusRecords: VirusRecordFilter
}

input CityWhereUniqueInput {
  id: String
}

type Country {
  id: String!
  provinces(after: String, before: String, first: Int, last: Int, skip: Int): [Province!]!
  title: String!
}

input CountryCreateOneWithoutProvincesInput {
  connect: CountryWhereUniqueInput
  create: CountryCreateWithoutProvincesInput
}

input CountryCreateOneWithoutVirusRecordsInput {
  connect: CountryWhereUniqueInput
  create: CountryCreateWithoutVirusRecordsInput
}

input CountryCreateWithoutProvincesInput {
  id: String
  title: String!
  virusRecords: VirusRecordCreateManyWithoutCountryInput
}

input CountryCreateWithoutVirusRecordsInput {
  id: String
  provinces: ProvinceCreateManyWithoutCountryInput
  title: String!
}

input CountryUpdateOneRequiredWithoutProvincesInput {
  connect: CountryWhereUniqueInput
  create: CountryCreateWithoutProvincesInput
  update: CountryUpdateWithoutProvincesDataInput
  upsert: CountryUpsertWithoutProvincesInput
}

input CountryUpdateOneRequiredWithoutVirusRecordsInput {
  connect: CountryWhereUniqueInput
  create: CountryCreateWithoutVirusRecordsInput
  update: CountryUpdateWithoutVirusRecordsDataInput
  upsert: CountryUpsertWithoutVirusRecordsInput
}

input CountryUpdateWithoutProvincesDataInput {
  id: String
  title: String
  virusRecords: VirusRecordUpdateManyWithoutCountryInput
}

input CountryUpdateWithoutVirusRecordsDataInput {
  id: String
  provinces: ProvinceUpdateManyWithoutCountryInput
  title: String
}

input CountryUpsertWithoutProvincesInput {
  create: CountryCreateWithoutProvincesInput!
  update: CountryUpdateWithoutProvincesDataInput!
}

input CountryUpsertWithoutVirusRecordsInput {
  create: CountryCreateWithoutVirusRecordsInput!
  update: CountryUpdateWithoutVirusRecordsDataInput!
}

input CountryWhereInput {
  AND: [CountryWhereInput!]
  id: StringFilter
  NOT: [CountryWhereInput!]
  OR: [CountryWhereInput!]
  provinces: ProvinceFilter
  title: StringFilter
  virusRecords: VirusRecordFilter
}

input CountryWhereUniqueInput {
  id: String
  title: String
}

scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

input InputVirusRecord {
  area: String
  city: String
  comment: String
  confirmedCount: Int
  country: String
  curedCount: Int
  deadCount: Int
  province: String
  recordAt: Float
  suspectedCount: Int
  virus: String
}

type Mutation {
  createVirusRecord(data: VirusRecordCreateInput!): VirusRecord!
  createVirusRecordDraft(data: InputVirusRecord): VirusRecord!
  deleteVirusRecord(where: VirusRecordWhereUniqueInput!): VirusRecord
  login(email: String!, password: String!): AuthPayload!
  publish(id: ID): VirusRecord
  signup(email: String!, name: String, nickname: String, password: String!): AuthPayload!
  updateVirusRecord(data: VirusRecordUpdateInput!, where: VirusRecordWhereUniqueInput!): VirusRecord
}

input NullableIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

input NullableStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

enum OrderByArg {
  asc
  desc
}

type Province {
  cities(after: String, before: String, first: Int, last: Int, skip: Int): [City!]!
  country: Country!
  id: String!
  title: String!
}

input ProvinceCreateManyWithoutCountryInput {
  connect: [ProvinceWhereUniqueInput!]
  create: [ProvinceCreateWithoutCountryInput!]
}

input ProvinceCreateOneWithoutCitiesInput {
  connect: ProvinceWhereUniqueInput
  create: ProvinceCreateWithoutCitiesInput
}

input ProvinceCreateOneWithoutVirusRecordsInput {
  connect: ProvinceWhereUniqueInput
  create: ProvinceCreateWithoutVirusRecordsInput
}

input ProvinceCreateWithoutCitiesInput {
  country: CountryCreateOneWithoutProvincesInput!
  id: String
  title: String!
  virusRecords: VirusRecordCreateManyWithoutProvinceInput
}

input ProvinceCreateWithoutCountryInput {
  cities: CityCreateManyWithoutProvinceInput
  id: String
  title: String!
  virusRecords: VirusRecordCreateManyWithoutProvinceInput
}

input ProvinceCreateWithoutVirusRecordsInput {
  cities: CityCreateManyWithoutProvinceInput
  country: CountryCreateOneWithoutProvincesInput!
  id: String
  title: String!
}

input ProvinceFilter {
  every: ProvinceWhereInput
  none: ProvinceWhereInput
  some: ProvinceWhereInput
}

input ProvinceOrderByInput {
  id: OrderByArg
  title: OrderByArg
}

input ProvinceScalarWhereInput {
  AND: [ProvinceScalarWhereInput!]
  cities: CityFilter
  id: StringFilter
  NOT: [ProvinceScalarWhereInput!]
  OR: [ProvinceScalarWhereInput!]
  title: StringFilter
  virusRecords: VirusRecordFilter
}

input ProvinceUpdateManyDataInput {
  id: String
  title: String
}

input ProvinceUpdateManyWithoutCountryInput {
  connect: [ProvinceWhereUniqueInput!]
  create: [ProvinceCreateWithoutCountryInput!]
  delete: [ProvinceWhereUniqueInput!]
  deleteMany: [ProvinceScalarWhereInput!]
  disconnect: [ProvinceWhereUniqueInput!]
  set: [ProvinceWhereUniqueInput!]
  update: [ProvinceUpdateWithWhereUniqueWithoutCountryInput!]
  updateMany: [ProvinceUpdateManyWithWhereNestedInput!]
  upsert: [ProvinceUpsertWithWhereUniqueWithoutCountryInput!]
}

input ProvinceUpdateManyWithWhereNestedInput {
  data: ProvinceUpdateManyDataInput!
  where: ProvinceScalarWhereInput!
}

input ProvinceUpdateOneRequiredWithoutCitiesInput {
  connect: ProvinceWhereUniqueInput
  create: ProvinceCreateWithoutCitiesInput
  update: ProvinceUpdateWithoutCitiesDataInput
  upsert: ProvinceUpsertWithoutCitiesInput
}

input ProvinceUpdateOneWithoutVirusRecordsInput {
  connect: ProvinceWhereUniqueInput
  create: ProvinceCreateWithoutVirusRecordsInput
  delete: Boolean
  disconnect: Boolean
  update: ProvinceUpdateWithoutVirusRecordsDataInput
  upsert: ProvinceUpsertWithoutVirusRecordsInput
}

input ProvinceUpdateWithoutCitiesDataInput {
  country: CountryUpdateOneRequiredWithoutProvincesInput
  id: String
  title: String
  virusRecords: VirusRecordUpdateManyWithoutProvinceInput
}

input ProvinceUpdateWithoutCountryDataInput {
  cities: CityUpdateManyWithoutProvinceInput
  id: String
  title: String
  virusRecords: VirusRecordUpdateManyWithoutProvinceInput
}

input ProvinceUpdateWithoutVirusRecordsDataInput {
  cities: CityUpdateManyWithoutProvinceInput
  country: CountryUpdateOneRequiredWithoutProvincesInput
  id: String
  title: String
}

input ProvinceUpdateWithWhereUniqueWithoutCountryInput {
  data: ProvinceUpdateWithoutCountryDataInput!
  where: ProvinceWhereUniqueInput!
}

input ProvinceUpsertWithoutCitiesInput {
  create: ProvinceCreateWithoutCitiesInput!
  update: ProvinceUpdateWithoutCitiesDataInput!
}

input ProvinceUpsertWithoutVirusRecordsInput {
  create: ProvinceCreateWithoutVirusRecordsInput!
  update: ProvinceUpdateWithoutVirusRecordsDataInput!
}

input ProvinceUpsertWithWhereUniqueWithoutCountryInput {
  create: ProvinceCreateWithoutCountryInput!
  update: ProvinceUpdateWithoutCountryDataInput!
  where: ProvinceWhereUniqueInput!
}

input ProvinceWhereInput {
  AND: [ProvinceWhereInput!]
  cities: CityFilter
  country: CountryWhereInput
  id: StringFilter
  NOT: [ProvinceWhereInput!]
  OR: [ProvinceWhereInput!]
  title: StringFilter
  virusRecords: VirusRecordFilter
}

input ProvinceWhereUniqueInput {
  id: String
  title: String
}

type Query {
  areas(after: String, before: String, first: Int, last: Int, orderBy: AreaOrderByInput, skip: Int, where: AreaWhereInput): [Area!]!
  cities(after: String, before: String, first: Int, last: Int, orderBy: CityOrderByInput, skip: Int, where: CityWhereInput): [City!]!
  city(where: CityWhereUniqueInput!): City
  countries(after: String, before: String, first: Int, last: Int, skip: Int): [Country!]!
  country(where: CountryWhereUniqueInput!): Country
  me: User
  provinces(after: String, before: String, first: Int, last: Int, orderBy: ProvinceOrderByInput, skip: Int, where: ProvinceWhereInput): [Province!]!
  virusInfo(where: VirusInfoWhereUniqueInput!): VirusInfo
  virusRecord(where: VirusRecordWhereUniqueInput!): VirusRecord
  virusRecords(after: String, before: String, first: Int, last: Int, orderBy: VirusRecordOrderByInput, skip: Int, where: VirusRecordWhereInput): [VirusRecord!]!
}

enum Role {
  ADMIN
  USER
  VERIFIED
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type User {
  avatar: Boolean!
  createdAt: DateTime!
  email: String!
  id: String!
  name: String
  nickname: String!
  publicVirusRecords(after: String, before: String, first: Int, last: Int, orderBy: VirusRecordOrderByInput, skip: Int, where: VirusRecordWhereInput): [VirusRecord!]!
  role: Role!
  updatedAt: DateTime!
  updatedVirusRecords(after: String, before: String, first: Int, last: Int, orderBy: VirusRecordOrderByInput, skip: Int, where: VirusRecordWhereInput): [VirusRecord!]!
  virusRecords(after: String, before: String, first: Int, last: Int, orderBy: VirusRecordOrderByInput, skip: Int, where: VirusRecordWhereInput): [VirusRecord!]!
}

input UserCreateOneWithoutPublicVirusRecordsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutPublicVirusRecordsInput
}

input UserCreateOneWithoutUpdatedVirusRecordsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutUpdatedVirusRecordsInput
}

input UserCreateOneWithoutVirusRecordsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutVirusRecordsInput
}

input UserCreateWithoutPublicVirusRecordsInput {
  avatar: Boolean
  createdAt: DateTime
  email: String!
  id: String
  name: String
  nickname: String!
  password: String!
  role: Role
  updatedAt: DateTime
  updatedVirusRecords: VirusRecordCreateManyWithoutUpdatedByInput
  virusRecords: VirusRecordCreateManyWithoutCreatedByInput
}

input UserCreateWithoutUpdatedVirusRecordsInput {
  avatar: Boolean
  createdAt: DateTime
  email: String!
  id: String
  name: String
  nickname: String!
  password: String!
  publicVirusRecords: VirusRecordCreateManyWithoutPublishedByInput
  role: Role
  updatedAt: DateTime
  virusRecords: VirusRecordCreateManyWithoutCreatedByInput
}

input UserCreateWithoutVirusRecordsInput {
  avatar: Boolean
  createdAt: DateTime
  email: String!
  id: String
  name: String
  nickname: String!
  password: String!
  publicVirusRecords: VirusRecordCreateManyWithoutPublishedByInput
  role: Role
  updatedAt: DateTime
  updatedVirusRecords: VirusRecordCreateManyWithoutUpdatedByInput
}

input UserUpdateOneWithoutPublicVirusRecordsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutPublicVirusRecordsInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutPublicVirusRecordsDataInput
  upsert: UserUpsertWithoutPublicVirusRecordsInput
}

input UserUpdateOneWithoutUpdatedVirusRecordsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutUpdatedVirusRecordsInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutUpdatedVirusRecordsDataInput
  upsert: UserUpsertWithoutUpdatedVirusRecordsInput
}

input UserUpdateOneWithoutVirusRecordsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutVirusRecordsInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutVirusRecordsDataInput
  upsert: UserUpsertWithoutVirusRecordsInput
}

input UserUpdateWithoutPublicVirusRecordsDataInput {
  avatar: Boolean
  createdAt: DateTime
  email: String
  id: String
  name: String
  nickname: String
  password: String
  role: Role
  updatedAt: DateTime
  updatedVirusRecords: VirusRecordUpdateManyWithoutUpdatedByInput
  virusRecords: VirusRecordUpdateManyWithoutCreatedByInput
}

input UserUpdateWithoutUpdatedVirusRecordsDataInput {
  avatar: Boolean
  createdAt: DateTime
  email: String
  id: String
  name: String
  nickname: String
  password: String
  publicVirusRecords: VirusRecordUpdateManyWithoutPublishedByInput
  role: Role
  updatedAt: DateTime
  virusRecords: VirusRecordUpdateManyWithoutCreatedByInput
}

input UserUpdateWithoutVirusRecordsDataInput {
  avatar: Boolean
  createdAt: DateTime
  email: String
  id: String
  name: String
  nickname: String
  password: String
  publicVirusRecords: VirusRecordUpdateManyWithoutPublishedByInput
  role: Role
  updatedAt: DateTime
  updatedVirusRecords: VirusRecordUpdateManyWithoutUpdatedByInput
}

input UserUpsertWithoutPublicVirusRecordsInput {
  create: UserCreateWithoutPublicVirusRecordsInput!
  update: UserUpdateWithoutPublicVirusRecordsDataInput!
}

input UserUpsertWithoutUpdatedVirusRecordsInput {
  create: UserCreateWithoutUpdatedVirusRecordsInput!
  update: UserUpdateWithoutUpdatedVirusRecordsDataInput!
}

input UserUpsertWithoutVirusRecordsInput {
  create: UserCreateWithoutVirusRecordsInput!
  update: UserUpdateWithoutVirusRecordsDataInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  avatar: BooleanFilter
  createdAt: DateTimeFilter
  email: StringFilter
  id: StringFilter
  name: NullableStringFilter
  nickname: StringFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  password: StringFilter
  publicVirusRecords: VirusRecordFilter
  role: Role
  updatedAt: DateTimeFilter
  updatedVirusRecords: VirusRecordFilter
  virusRecords: VirusRecordFilter
}

input UserWhereUniqueInput {
  email: String
  id: String
  name: String
  nickname: String
}

type VirusInfo {
  description: String!
  id: String!
  title: String!
}

input VirusInfoCreateOneWithoutVirusRecordsInput {
  connect: VirusInfoWhereUniqueInput
  create: VirusInfoCreateWithoutVirusRecordsInput
}

input VirusInfoCreateWithoutVirusRecordsInput {
  description: String!
  id: String
  title: String!
}

input VirusInfoUpdateOneRequiredWithoutVirusRecordsInput {
  connect: VirusInfoWhereUniqueInput
  create: VirusInfoCreateWithoutVirusRecordsInput
  update: VirusInfoUpdateWithoutVirusRecordsDataInput
  upsert: VirusInfoUpsertWithoutVirusRecordsInput
}

input VirusInfoUpdateWithoutVirusRecordsDataInput {
  description: String
  id: String
  title: String
}

input VirusInfoUpsertWithoutVirusRecordsInput {
  create: VirusInfoCreateWithoutVirusRecordsInput!
  update: VirusInfoUpdateWithoutVirusRecordsDataInput!
}

input VirusInfoWhereInput {
  AND: [VirusInfoWhereInput!]
  description: StringFilter
  id: StringFilter
  NOT: [VirusInfoWhereInput!]
  OR: [VirusInfoWhereInput!]
  title: StringFilter
  virusRecords: VirusRecordFilter
}

input VirusInfoWhereUniqueInput {
  id: String
  title: String
}

type VirusRecord {
  area: Area
  city: City
  comment: String
  confirmedCount: Int
  country: Country!
  createdAt: DateTime!
  createdBy: User
  curedCount: Int
  deadCount: Int
  id: String!
  province: Province
  published: Boolean!
  publishedAt: DateTime!
  publishedBy: User
  recordAt: DateTime!
  suspectedCount: Int
  updatedAt: DateTime!
  updatedBy: User
  virus: VirusInfo!
}

input VirusRecordCreateInput {
  area: AreaCreateOneWithoutVirusRecordsInput
  city: CityCreateOneWithoutVirusRecordsInput
  comment: String
  confirmedCount: Int
  country: CountryCreateOneWithoutVirusRecordsInput!
  createdAt: DateTime
  createdBy: UserCreateOneWithoutVirusRecordsInput
  curedCount: Int
  deadCount: Int
  id: String
  province: ProvinceCreateOneWithoutVirusRecordsInput
  published: Boolean
  publishedAt: DateTime
  publishedBy: UserCreateOneWithoutPublicVirusRecordsInput
  recordAt: DateTime
  suspectedCount: Int
  updatedAt: DateTime
  updatedBy: UserCreateOneWithoutUpdatedVirusRecordsInput
  virus: VirusInfoCreateOneWithoutVirusRecordsInput!
}

input VirusRecordCreateManyWithoutAreaInput {
  connect: [VirusRecordWhereUniqueInput!]
  create: [VirusRecordCreateWithoutAreaInput!]
}

input VirusRecordCreateManyWithoutCityInput {
  connect: [VirusRecordWhereUniqueInput!]
  create: [VirusRecordCreateWithoutCityInput!]
}

input VirusRecordCreateManyWithoutCountryInput {
  connect: [VirusRecordWhereUniqueInput!]
  create: [VirusRecordCreateWithoutCountryInput!]
}

input VirusRecordCreateManyWithoutCreatedByInput {
  connect: [VirusRecordWhereUniqueInput!]
  create: [VirusRecordCreateWithoutCreatedByInput!]
}

input VirusRecordCreateManyWithoutProvinceInput {
  connect: [VirusRecordWhereUniqueInput!]
  create: [VirusRecordCreateWithoutProvinceInput!]
}

input VirusRecordCreateManyWithoutPublishedByInput {
  connect: [VirusRecordWhereUniqueInput!]
  create: [VirusRecordCreateWithoutPublishedByInput!]
}

input VirusRecordCreateManyWithoutUpdatedByInput {
  connect: [VirusRecordWhereUniqueInput!]
  create: [VirusRecordCreateWithoutUpdatedByInput!]
}

input VirusRecordCreateWithoutAreaInput {
  city: CityCreateOneWithoutVirusRecordsInput
  comment: String
  confirmedCount: Int
  country: CountryCreateOneWithoutVirusRecordsInput!
  createdAt: DateTime
  createdBy: UserCreateOneWithoutVirusRecordsInput
  curedCount: Int
  deadCount: Int
  id: String
  province: ProvinceCreateOneWithoutVirusRecordsInput
  published: Boolean
  publishedAt: DateTime
  publishedBy: UserCreateOneWithoutPublicVirusRecordsInput
  recordAt: DateTime
  suspectedCount: Int
  updatedAt: DateTime
  updatedBy: UserCreateOneWithoutUpdatedVirusRecordsInput
  virus: VirusInfoCreateOneWithoutVirusRecordsInput!
}

input VirusRecordCreateWithoutCityInput {
  area: AreaCreateOneWithoutVirusRecordsInput
  comment: String
  confirmedCount: Int
  country: CountryCreateOneWithoutVirusRecordsInput!
  createdAt: DateTime
  createdBy: UserCreateOneWithoutVirusRecordsInput
  curedCount: Int
  deadCount: Int
  id: String
  province: ProvinceCreateOneWithoutVirusRecordsInput
  published: Boolean
  publishedAt: DateTime
  publishedBy: UserCreateOneWithoutPublicVirusRecordsInput
  recordAt: DateTime
  suspectedCount: Int
  updatedAt: DateTime
  updatedBy: UserCreateOneWithoutUpdatedVirusRecordsInput
  virus: VirusInfoCreateOneWithoutVirusRecordsInput!
}

input VirusRecordCreateWithoutCountryInput {
  area: AreaCreateOneWithoutVirusRecordsInput
  city: CityCreateOneWithoutVirusRecordsInput
  comment: String
  confirmedCount: Int
  createdAt: DateTime
  createdBy: UserCreateOneWithoutVirusRecordsInput
  curedCount: Int
  deadCount: Int
  id: String
  province: ProvinceCreateOneWithoutVirusRecordsInput
  published: Boolean
  publishedAt: DateTime
  publishedBy: UserCreateOneWithoutPublicVirusRecordsInput
  recordAt: DateTime
  suspectedCount: Int
  updatedAt: DateTime
  updatedBy: UserCreateOneWithoutUpdatedVirusRecordsInput
  virus: VirusInfoCreateOneWithoutVirusRecordsInput!
}

input VirusRecordCreateWithoutCreatedByInput {
  area: AreaCreateOneWithoutVirusRecordsInput
  city: CityCreateOneWithoutVirusRecordsInput
  comment: String
  confirmedCount: Int
  country: CountryCreateOneWithoutVirusRecordsInput!
  createdAt: DateTime
  curedCount: Int
  deadCount: Int
  id: String
  province: ProvinceCreateOneWithoutVirusRecordsInput
  published: Boolean
  publishedAt: DateTime
  publishedBy: UserCreateOneWithoutPublicVirusRecordsInput
  recordAt: DateTime
  suspectedCount: Int
  updatedAt: DateTime
  updatedBy: UserCreateOneWithoutUpdatedVirusRecordsInput
  virus: VirusInfoCreateOneWithoutVirusRecordsInput!
}

input VirusRecordCreateWithoutProvinceInput {
  area: AreaCreateOneWithoutVirusRecordsInput
  city: CityCreateOneWithoutVirusRecordsInput
  comment: String
  confirmedCount: Int
  country: CountryCreateOneWithoutVirusRecordsInput!
  createdAt: DateTime
  createdBy: UserCreateOneWithoutVirusRecordsInput
  curedCount: Int
  deadCount: Int
  id: String
  published: Boolean
  publishedAt: DateTime
  publishedBy: UserCreateOneWithoutPublicVirusRecordsInput
  recordAt: DateTime
  suspectedCount: Int
  updatedAt: DateTime
  updatedBy: UserCreateOneWithoutUpdatedVirusRecordsInput
  virus: VirusInfoCreateOneWithoutVirusRecordsInput!
}

input VirusRecordCreateWithoutPublishedByInput {
  area: AreaCreateOneWithoutVirusRecordsInput
  city: CityCreateOneWithoutVirusRecordsInput
  comment: String
  confirmedCount: Int
  country: CountryCreateOneWithoutVirusRecordsInput!
  createdAt: DateTime
  createdBy: UserCreateOneWithoutVirusRecordsInput
  curedCount: Int
  deadCount: Int
  id: String
  province: ProvinceCreateOneWithoutVirusRecordsInput
  published: Boolean
  publishedAt: DateTime
  recordAt: DateTime
  suspectedCount: Int
  updatedAt: DateTime
  updatedBy: UserCreateOneWithoutUpdatedVirusRecordsInput
  virus: VirusInfoCreateOneWithoutVirusRecordsInput!
}

input VirusRecordCreateWithoutUpdatedByInput {
  area: AreaCreateOneWithoutVirusRecordsInput
  city: CityCreateOneWithoutVirusRecordsInput
  comment: String
  confirmedCount: Int
  country: CountryCreateOneWithoutVirusRecordsInput!
  createdAt: DateTime
  createdBy: UserCreateOneWithoutVirusRecordsInput
  curedCount: Int
  deadCount: Int
  id: String
  province: ProvinceCreateOneWithoutVirusRecordsInput
  published: Boolean
  publishedAt: DateTime
  publishedBy: UserCreateOneWithoutPublicVirusRecordsInput
  recordAt: DateTime
  suspectedCount: Int
  updatedAt: DateTime
  virus: VirusInfoCreateOneWithoutVirusRecordsInput!
}

input VirusRecordFilter {
  every: VirusRecordWhereInput
  none: VirusRecordWhereInput
  some: VirusRecordWhereInput
}

input VirusRecordOrderByInput {
  comment: OrderByArg
  confirmedCount: OrderByArg
  createdAt: OrderByArg
  curedCount: OrderByArg
  deadCount: OrderByArg
  id: OrderByArg
  published: OrderByArg
  publishedAt: OrderByArg
  recordAt: OrderByArg
  suspectedCount: OrderByArg
  updatedAt: OrderByArg
}

input VirusRecordScalarWhereInput {
  AND: [VirusRecordScalarWhereInput!]
  comment: NullableStringFilter
  confirmedCount: NullableIntFilter
  createdAt: DateTimeFilter
  curedCount: NullableIntFilter
  deadCount: NullableIntFilter
  id: StringFilter
  NOT: [VirusRecordScalarWhereInput!]
  OR: [VirusRecordScalarWhereInput!]
  published: BooleanFilter
  publishedAt: DateTimeFilter
  recordAt: DateTimeFilter
  suspectedCount: NullableIntFilter
  updatedAt: DateTimeFilter
}

input VirusRecordUpdateInput {
  area: AreaUpdateOneWithoutVirusRecordsInput
  city: CityUpdateOneWithoutVirusRecordsInput
  comment: String
  confirmedCount: Int
  country: CountryUpdateOneRequiredWithoutVirusRecordsInput
  createdAt: DateTime
  createdBy: UserUpdateOneWithoutVirusRecordsInput
  curedCount: Int
  deadCount: Int
  id: String
  province: ProvinceUpdateOneWithoutVirusRecordsInput
  published: Boolean
  publishedAt: DateTime
  publishedBy: UserUpdateOneWithoutPublicVirusRecordsInput
  recordAt: DateTime
  suspectedCount: Int
  updatedAt: DateTime
  updatedBy: UserUpdateOneWithoutUpdatedVirusRecordsInput
  virus: VirusInfoUpdateOneRequiredWithoutVirusRecordsInput
}

input VirusRecordUpdateManyDataInput {
  comment: String
  confirmedCount: Int
  createdAt: DateTime
  curedCount: Int
  deadCount: Int
  id: String
  published: Boolean
  publishedAt: DateTime
  recordAt: DateTime
  suspectedCount: Int
  updatedAt: DateTime
}

input VirusRecordUpdateManyWithoutAreaInput {
  connect: [VirusRecordWhereUniqueInput!]
  create: [VirusRecordCreateWithoutAreaInput!]
  delete: [VirusRecordWhereUniqueInput!]
  deleteMany: [VirusRecordScalarWhereInput!]
  disconnect: [VirusRecordWhereUniqueInput!]
  set: [VirusRecordWhereUniqueInput!]
  update: [VirusRecordUpdateWithWhereUniqueWithoutAreaInput!]
  updateMany: [VirusRecordUpdateManyWithWhereNestedInput!]
  upsert: [VirusRecordUpsertWithWhereUniqueWithoutAreaInput!]
}

input VirusRecordUpdateManyWithoutCityInput {
  connect: [VirusRecordWhereUniqueInput!]
  create: [VirusRecordCreateWithoutCityInput!]
  delete: [VirusRecordWhereUniqueInput!]
  deleteMany: [VirusRecordScalarWhereInput!]
  disconnect: [VirusRecordWhereUniqueInput!]
  set: [VirusRecordWhereUniqueInput!]
  update: [VirusRecordUpdateWithWhereUniqueWithoutCityInput!]
  updateMany: [VirusRecordUpdateManyWithWhereNestedInput!]
  upsert: [VirusRecordUpsertWithWhereUniqueWithoutCityInput!]
}

input VirusRecordUpdateManyWithoutCountryInput {
  connect: [VirusRecordWhereUniqueInput!]
  create: [VirusRecordCreateWithoutCountryInput!]
  delete: [VirusRecordWhereUniqueInput!]
  deleteMany: [VirusRecordScalarWhereInput!]
  disconnect: [VirusRecordWhereUniqueInput!]
  set: [VirusRecordWhereUniqueInput!]
  update: [VirusRecordUpdateWithWhereUniqueWithoutCountryInput!]
  updateMany: [VirusRecordUpdateManyWithWhereNestedInput!]
  upsert: [VirusRecordUpsertWithWhereUniqueWithoutCountryInput!]
}

input VirusRecordUpdateManyWithoutCreatedByInput {
  connect: [VirusRecordWhereUniqueInput!]
  create: [VirusRecordCreateWithoutCreatedByInput!]
  delete: [VirusRecordWhereUniqueInput!]
  deleteMany: [VirusRecordScalarWhereInput!]
  disconnect: [VirusRecordWhereUniqueInput!]
  set: [VirusRecordWhereUniqueInput!]
  update: [VirusRecordUpdateWithWhereUniqueWithoutCreatedByInput!]
  updateMany: [VirusRecordUpdateManyWithWhereNestedInput!]
  upsert: [VirusRecordUpsertWithWhereUniqueWithoutCreatedByInput!]
}

input VirusRecordUpdateManyWithoutProvinceInput {
  connect: [VirusRecordWhereUniqueInput!]
  create: [VirusRecordCreateWithoutProvinceInput!]
  delete: [VirusRecordWhereUniqueInput!]
  deleteMany: [VirusRecordScalarWhereInput!]
  disconnect: [VirusRecordWhereUniqueInput!]
  set: [VirusRecordWhereUniqueInput!]
  update: [VirusRecordUpdateWithWhereUniqueWithoutProvinceInput!]
  updateMany: [VirusRecordUpdateManyWithWhereNestedInput!]
  upsert: [VirusRecordUpsertWithWhereUniqueWithoutProvinceInput!]
}

input VirusRecordUpdateManyWithoutPublishedByInput {
  connect: [VirusRecordWhereUniqueInput!]
  create: [VirusRecordCreateWithoutPublishedByInput!]
  delete: [VirusRecordWhereUniqueInput!]
  deleteMany: [VirusRecordScalarWhereInput!]
  disconnect: [VirusRecordWhereUniqueInput!]
  set: [VirusRecordWhereUniqueInput!]
  update: [VirusRecordUpdateWithWhereUniqueWithoutPublishedByInput!]
  updateMany: [VirusRecordUpdateManyWithWhereNestedInput!]
  upsert: [VirusRecordUpsertWithWhereUniqueWithoutPublishedByInput!]
}

input VirusRecordUpdateManyWithoutUpdatedByInput {
  connect: [VirusRecordWhereUniqueInput!]
  create: [VirusRecordCreateWithoutUpdatedByInput!]
  delete: [VirusRecordWhereUniqueInput!]
  deleteMany: [VirusRecordScalarWhereInput!]
  disconnect: [VirusRecordWhereUniqueInput!]
  set: [VirusRecordWhereUniqueInput!]
  update: [VirusRecordUpdateWithWhereUniqueWithoutUpdatedByInput!]
  updateMany: [VirusRecordUpdateManyWithWhereNestedInput!]
  upsert: [VirusRecordUpsertWithWhereUniqueWithoutUpdatedByInput!]
}

input VirusRecordUpdateManyWithWhereNestedInput {
  data: VirusRecordUpdateManyDataInput!
  where: VirusRecordScalarWhereInput!
}

input VirusRecordUpdateWithoutAreaDataInput {
  city: CityUpdateOneWithoutVirusRecordsInput
  comment: String
  confirmedCount: Int
  country: CountryUpdateOneRequiredWithoutVirusRecordsInput
  createdAt: DateTime
  createdBy: UserUpdateOneWithoutVirusRecordsInput
  curedCount: Int
  deadCount: Int
  id: String
  province: ProvinceUpdateOneWithoutVirusRecordsInput
  published: Boolean
  publishedAt: DateTime
  publishedBy: UserUpdateOneWithoutPublicVirusRecordsInput
  recordAt: DateTime
  suspectedCount: Int
  updatedAt: DateTime
  updatedBy: UserUpdateOneWithoutUpdatedVirusRecordsInput
  virus: VirusInfoUpdateOneRequiredWithoutVirusRecordsInput
}

input VirusRecordUpdateWithoutCityDataInput {
  area: AreaUpdateOneWithoutVirusRecordsInput
  comment: String
  confirmedCount: Int
  country: CountryUpdateOneRequiredWithoutVirusRecordsInput
  createdAt: DateTime
  createdBy: UserUpdateOneWithoutVirusRecordsInput
  curedCount: Int
  deadCount: Int
  id: String
  province: ProvinceUpdateOneWithoutVirusRecordsInput
  published: Boolean
  publishedAt: DateTime
  publishedBy: UserUpdateOneWithoutPublicVirusRecordsInput
  recordAt: DateTime
  suspectedCount: Int
  updatedAt: DateTime
  updatedBy: UserUpdateOneWithoutUpdatedVirusRecordsInput
  virus: VirusInfoUpdateOneRequiredWithoutVirusRecordsInput
}

input VirusRecordUpdateWithoutCountryDataInput {
  area: AreaUpdateOneWithoutVirusRecordsInput
  city: CityUpdateOneWithoutVirusRecordsInput
  comment: String
  confirmedCount: Int
  createdAt: DateTime
  createdBy: UserUpdateOneWithoutVirusRecordsInput
  curedCount: Int
  deadCount: Int
  id: String
  province: ProvinceUpdateOneWithoutVirusRecordsInput
  published: Boolean
  publishedAt: DateTime
  publishedBy: UserUpdateOneWithoutPublicVirusRecordsInput
  recordAt: DateTime
  suspectedCount: Int
  updatedAt: DateTime
  updatedBy: UserUpdateOneWithoutUpdatedVirusRecordsInput
  virus: VirusInfoUpdateOneRequiredWithoutVirusRecordsInput
}

input VirusRecordUpdateWithoutCreatedByDataInput {
  area: AreaUpdateOneWithoutVirusRecordsInput
  city: CityUpdateOneWithoutVirusRecordsInput
  comment: String
  confirmedCount: Int
  country: CountryUpdateOneRequiredWithoutVirusRecordsInput
  createdAt: DateTime
  curedCount: Int
  deadCount: Int
  id: String
  province: ProvinceUpdateOneWithoutVirusRecordsInput
  published: Boolean
  publishedAt: DateTime
  publishedBy: UserUpdateOneWithoutPublicVirusRecordsInput
  recordAt: DateTime
  suspectedCount: Int
  updatedAt: DateTime
  updatedBy: UserUpdateOneWithoutUpdatedVirusRecordsInput
  virus: VirusInfoUpdateOneRequiredWithoutVirusRecordsInput
}

input VirusRecordUpdateWithoutProvinceDataInput {
  area: AreaUpdateOneWithoutVirusRecordsInput
  city: CityUpdateOneWithoutVirusRecordsInput
  comment: String
  confirmedCount: Int
  country: CountryUpdateOneRequiredWithoutVirusRecordsInput
  createdAt: DateTime
  createdBy: UserUpdateOneWithoutVirusRecordsInput
  curedCount: Int
  deadCount: Int
  id: String
  published: Boolean
  publishedAt: DateTime
  publishedBy: UserUpdateOneWithoutPublicVirusRecordsInput
  recordAt: DateTime
  suspectedCount: Int
  updatedAt: DateTime
  updatedBy: UserUpdateOneWithoutUpdatedVirusRecordsInput
  virus: VirusInfoUpdateOneRequiredWithoutVirusRecordsInput
}

input VirusRecordUpdateWithoutPublishedByDataInput {
  area: AreaUpdateOneWithoutVirusRecordsInput
  city: CityUpdateOneWithoutVirusRecordsInput
  comment: String
  confirmedCount: Int
  country: CountryUpdateOneRequiredWithoutVirusRecordsInput
  createdAt: DateTime
  createdBy: UserUpdateOneWithoutVirusRecordsInput
  curedCount: Int
  deadCount: Int
  id: String
  province: ProvinceUpdateOneWithoutVirusRecordsInput
  published: Boolean
  publishedAt: DateTime
  recordAt: DateTime
  suspectedCount: Int
  updatedAt: DateTime
  updatedBy: UserUpdateOneWithoutUpdatedVirusRecordsInput
  virus: VirusInfoUpdateOneRequiredWithoutVirusRecordsInput
}

input VirusRecordUpdateWithoutUpdatedByDataInput {
  area: AreaUpdateOneWithoutVirusRecordsInput
  city: CityUpdateOneWithoutVirusRecordsInput
  comment: String
  confirmedCount: Int
  country: CountryUpdateOneRequiredWithoutVirusRecordsInput
  createdAt: DateTime
  createdBy: UserUpdateOneWithoutVirusRecordsInput
  curedCount: Int
  deadCount: Int
  id: String
  province: ProvinceUpdateOneWithoutVirusRecordsInput
  published: Boolean
  publishedAt: DateTime
  publishedBy: UserUpdateOneWithoutPublicVirusRecordsInput
  recordAt: DateTime
  suspectedCount: Int
  updatedAt: DateTime
  virus: VirusInfoUpdateOneRequiredWithoutVirusRecordsInput
}

input VirusRecordUpdateWithWhereUniqueWithoutAreaInput {
  data: VirusRecordUpdateWithoutAreaDataInput!
  where: VirusRecordWhereUniqueInput!
}

input VirusRecordUpdateWithWhereUniqueWithoutCityInput {
  data: VirusRecordUpdateWithoutCityDataInput!
  where: VirusRecordWhereUniqueInput!
}

input VirusRecordUpdateWithWhereUniqueWithoutCountryInput {
  data: VirusRecordUpdateWithoutCountryDataInput!
  where: VirusRecordWhereUniqueInput!
}

input VirusRecordUpdateWithWhereUniqueWithoutCreatedByInput {
  data: VirusRecordUpdateWithoutCreatedByDataInput!
  where: VirusRecordWhereUniqueInput!
}

input VirusRecordUpdateWithWhereUniqueWithoutProvinceInput {
  data: VirusRecordUpdateWithoutProvinceDataInput!
  where: VirusRecordWhereUniqueInput!
}

input VirusRecordUpdateWithWhereUniqueWithoutPublishedByInput {
  data: VirusRecordUpdateWithoutPublishedByDataInput!
  where: VirusRecordWhereUniqueInput!
}

input VirusRecordUpdateWithWhereUniqueWithoutUpdatedByInput {
  data: VirusRecordUpdateWithoutUpdatedByDataInput!
  where: VirusRecordWhereUniqueInput!
}

input VirusRecordUpsertWithWhereUniqueWithoutAreaInput {
  create: VirusRecordCreateWithoutAreaInput!
  update: VirusRecordUpdateWithoutAreaDataInput!
  where: VirusRecordWhereUniqueInput!
}

input VirusRecordUpsertWithWhereUniqueWithoutCityInput {
  create: VirusRecordCreateWithoutCityInput!
  update: VirusRecordUpdateWithoutCityDataInput!
  where: VirusRecordWhereUniqueInput!
}

input VirusRecordUpsertWithWhereUniqueWithoutCountryInput {
  create: VirusRecordCreateWithoutCountryInput!
  update: VirusRecordUpdateWithoutCountryDataInput!
  where: VirusRecordWhereUniqueInput!
}

input VirusRecordUpsertWithWhereUniqueWithoutCreatedByInput {
  create: VirusRecordCreateWithoutCreatedByInput!
  update: VirusRecordUpdateWithoutCreatedByDataInput!
  where: VirusRecordWhereUniqueInput!
}

input VirusRecordUpsertWithWhereUniqueWithoutProvinceInput {
  create: VirusRecordCreateWithoutProvinceInput!
  update: VirusRecordUpdateWithoutProvinceDataInput!
  where: VirusRecordWhereUniqueInput!
}

input VirusRecordUpsertWithWhereUniqueWithoutPublishedByInput {
  create: VirusRecordCreateWithoutPublishedByInput!
  update: VirusRecordUpdateWithoutPublishedByDataInput!
  where: VirusRecordWhereUniqueInput!
}

input VirusRecordUpsertWithWhereUniqueWithoutUpdatedByInput {
  create: VirusRecordCreateWithoutUpdatedByInput!
  update: VirusRecordUpdateWithoutUpdatedByDataInput!
  where: VirusRecordWhereUniqueInput!
}

input VirusRecordWhereInput {
  AND: [VirusRecordWhereInput!]
  area: AreaWhereInput
  city: CityWhereInput
  comment: NullableStringFilter
  confirmedCount: NullableIntFilter
  country: CountryWhereInput
  createdAt: DateTimeFilter
  createdBy: UserWhereInput
  curedCount: NullableIntFilter
  deadCount: NullableIntFilter
  id: StringFilter
  NOT: [VirusRecordWhereInput!]
  OR: [VirusRecordWhereInput!]
  province: ProvinceWhereInput
  published: BooleanFilter
  publishedAt: DateTimeFilter
  publishedBy: UserWhereInput
  recordAt: DateTimeFilter
  suspectedCount: NullableIntFilter
  updatedAt: DateTimeFilter
  updatedBy: UserWhereInput
  virus: VirusInfoWhereInput
}

input VirusRecordWhereUniqueInput {
  id: String
}
